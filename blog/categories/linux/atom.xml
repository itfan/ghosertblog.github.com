<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | 张佳伟的博客]]></title>
  <link href="http://ghosertBlog.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://ghosertBlog.github.com/"/>
  <updated>2013-03-19T14:23:18+08:00</updated>
  <id>http://ghosertBlog.github.com/</id>
  <author>
    <name><![CDATA[张佳伟]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ubuntu桌面生存指南 (5) --- Ubuntu常用效率软件简介]]></title>
    <link href="http://ghosertBlog.github.com/blog/2013/01/07/ubuntu-efficient-software/"/>
    <updated>2013-01-07T19:45:00+08:00</updated>
    <id>http://ghosertBlog.github.com/blog/2013/01/07/ubuntu-efficient-software</id>
    <content type="html"><![CDATA[<h2>Ubuntu常用效率软件简介</h2>

<p>之前的一系列博客里，基本上我们夯实了使用Ubuntu系统所需的基础知识，这一篇里我们来谈谈在这个低调而强大的平台上，如何使得操作者遵循系统的设计理念，通过恰当的选用软件，从而达到人机合一的化境，将这个平台的潜能发挥到极致，进而十倍，百倍的提升操作者的生产效率。我们就接着聊聊Ubuntu/Linux下的常用效率软件，网络上常常有Linux用户在学习，使用了这个平台上的软件以后发出这样的感叹：“几乎每一个Linux软件都可以写成一本书”。这基本上就是Linux系软件强大到令人敬畏的最好注脚。也因此在有限的篇幅里不可能涵盖那么多软件的方方面面，更何况笔者本人视野有限，故以下文字只做提纲挈领的引介，希望起到抛砖引玉，启示读者的作用。这一篇里先对常用软件做简介，考虑到Linux作为一个开发者系统的角色，我们在下篇里再介绍针对开发者需要的软件。大体上我会按以下思路介绍每个软件：</p>

<ol>
<li>软件背景</li>
<li>安装配置</li>
<li>入门与心得</li>
</ol>


<!--more-->


<h2>编辑器之神：GVim</h2>

<p>Vi/Vim是Linux系机器默认标配的编辑器软件，基本上我认为你可以不需要Linux上的任何其它软件，但是你不可以说：“我想学Linux，但是我不想学Vi/Vim”。Vi/Vim的学习曲线很高，但是你一定需要学会的理由是：</p>

<p><strong>1. 文本系统</strong></p>

<p>Linux系统是基于命令，文本配置的系统，更别说如果你还是一个开发者需要写代码，不能熟练使用世人尊称编辑器之神的杀手级应用，你在这个GUI不友好的世界里其实寸步难行。</p>

<p><strong>2. 无处不在</strong></p>

<p>如果你使用Linux，意味着你不会安心的只使用自己的本地桌面，装上Vi/Vim替代品假装不需要学习Vi/Vim，你更有可能需要远程登录到一个陌生环境去操作另一台Linux，而那个机器上80%的可能只有默认标配的Vi/Vim，这种状况下任谁都会感到很局促，也有变通的方法：我看到很多Windows下的开发者使用ftp客户端从远程机器上去拖拽几个G的日志文件到本地，然后再使用Windows上的编辑器花几分钟时间加载这个巨大的文件，这还没有结束，如果问题没有解决，这个痛苦费力的过程会继续一而再，再而三的重复下去。这个时候我常常想他们为什么不把这些时间花在学习Vi/Vim上呢？</p>

<p><strong>3. 高效编辑</strong></p>

<p>作为编辑器，Vi/Vim发展至今，再配合精良的插件机制，其功能的丰富和强悍已经超越了人类可以做到想到的极限。在最初，鼠标出现以前，人类只能依靠键盘操作电脑，码字，尤其是如何高效码字是其中重要的一项操作，Vi/Vim就是被设计成高效使用键盘码字的工具。所以它分了三种编辑模式，在细节上，规定所有击键行为只发生在主键盘区：只是为了避免双手哪怕多几个厘米间的位移产生的效率损耗。还是为了向效率妥协，它设计了种种反人类的操作方式来实现各种编辑功能，为了追求编辑效率，它向人类施加操作成本和记忆负担。在鼠标出现以后，理应只为键盘服务的码字软件却因为它的高效设计在程序员中间依然有很高的接受度。这种现象其实更应该让我们反思今天所谓讨好普通用户的人机设计中到底存在哪些问题。</p>

<p><strong>4. 一劳永逸</strong></p>

<p>学习Vi/Vim并不是在学习Vi/Vim本身，而是在学习一套使用键盘操控计算机的规范(例如：hjkl表示左下上右)，由于这套规范被很多人认可接受已经成为一种<strong>标准规范</strong>，所以这套<strong>标准规范</strong>被嫁接到其它许多的软件上诸如：Vimperator， w3m， Eclipse， 甚至是GVim的死敌Emacs。可见作为一种约定成俗的标准，学习Vi/Vim的边际效益十分可观，你只要学会这种规范，就可以在许多地方——不止于编辑器本身，发挥学习成果的威力，我们在下面的文字中会看到许多这样的案例，先讲一个小例子，在终端中输入：
<code>
$ set -o vi
</code>
可以开启以兼容vi的快捷键操作bash命令，此时你可以在终端使用Esc切换到命令模式，在命令模式下，按 h，l 可以左右移动光标，按 j，k 可以切换前一条后一条命令。x可以修改字符，"$， ^"可以返回命令尾部或头部，i 可以返回编辑模式。</p>

<h3>软件安装配置</h3>

<p>Vi/Vim 本身不需要安装，但是如果你更乐衷于视觉效果更好，功能更丰富的GUI版本可以安装GVim:
<code>
$ sudo apt-get install vim-gnome
</code>
安装完毕以后，在终端界面中随时键入以下命令就可以开始编辑文件：
<code>
$ vi filename
$ gvim -f filename # Ubuntu 12.04 和 gvim 有冲突，需要加 -f 参数，否则启动gvim后有假死现象。
</code>
配置文件位于：</p>

<ol>
<li>~/.vimrc 主要用于编辑器本身相关的设置，例如：字体，快捷键，插件相关设置。</li>
<li>~/.vim 目录用于存放设置前后背景色，语法高亮等主题文件，第三方插件文件等。</li>
</ol>


<p>插件管理：</p>

<p>由于传统的Vim插件只需要在下载后拷贝进上述 ~/.vim 目录，一来不方便管理：每个插件都会有三四个子目录散落在~/.vim这个主目录里，二来不方便更新插件：如果插件有更新，需要重复拷贝插件至~/.vim目录的步骤。为了解决这两个问题，最近比较流行的插件管理方法是首先安装另一个名为 <a href="https://github.com/tpope/vim-pathogen">pathogen</a> 的管理插件的插件，然后新建目录
<code>
$ mkdir -p ~/.vim/bundle
</code>
以后所有的插件都可以通过 git clone 的方式（关于 git，有兴趣的同学可以先参考这里： <a href="https://github.com/">github</a>），拷贝到 ~/.vim/bundle 例如：安装名为 <a href="https://github.com/skammer/vim-css-color">vim-css-color</a> 的插件用于高亮css中的颜色代码，只需要：
<code>
$ cd ~/.vim/bundle
$ git clone https://github.com/skammer/vim-css-color.git
</code>
这样插件文件会被集中管理在~/.vim/bundle/vim-css-color，同时只需要在插件目录中执行 git pull 就可以一键更新，vim-css-color 插件效果图如下。</p>

<p><img src="/images/ubuntu_living_handbook/vim-css-color.png" title="vim css color screenshot" alt="vim css color" /></p>

<h3>入门与心得</h3>

<p>Vi/Vim 纵使有诸多好处，阻碍人类使用它的最大障碍在于陡峭的学习曲线。我在网络上听到过哀鸿遍野的声音：“学不会快捷键，学了就忘，太难用了，放弃了”。因为没有循序渐进的阶梯，所以希望学会Vi/Vim的初学者需要集中一段时间的精力反复操练，好像一道坎一样，跨过去别有洞天，过不去就放弃了。再打个鲤鱼跃龙门的比方，你需要卯足了气力使劲跳，跳过去成龙，跳不过去放弃了就始终是条鱼，这就是学习Vi/Vim的真实写照。所以这个事情首先取决于练习者的决心，其次我们再来讲一些学习技巧。</p>

<p>关于学习Vi/Vim的资源，在网络上不计其数，我看到过各种书籍，文章，博客，有同学很认真的在阅读，翻看，甚至记录笔记，还有许多同学，把所有快捷键的图片作为背景设置在桌面上，甚至彩打在纸张上，贴在自己的电脑边。这里面其实有一些问题：</p>

<ol>
<li>只言片语的文章博客并不能系统的告诉你到底哪些Vim操作是最基本需要掌握的。</li>
<li>反过来，煞有其事的找来一本书看，你又迷失在“知识”的海洋里。</li>
<li>因为知道学习Vi/Vim这个事情是有记忆成本的，而采用设背景，贴墙纸的方法试图能时常提醒自己不要遗忘各种键法。</li>
</ol>


<p>看上去逻辑很完备，但是对于一个强调操作和手感的工具，大多数同学的努力实际上找错了方向：<strong>找手感需要锻炼的是肌肉记忆而不是脑力记忆</strong>。关键的问题不在于你看了多少关于 Vi/Vim 的文章，书，记了多少笔记，脑子是否记住了那些快捷键，关键的问题在于<strong>你对最基础的操作有过多少次反复的练习，通过这些大量的练习是否建立起了适用情景和键法之间的条件反射，我这里称其为肌肉记忆</strong>。你需要的是通过大量的基础练习强化神经脊髓质的厚度，训练自己建立情景<->键法的条件反射，把这种反射刻在肌肉记忆里，一旦通过训练形成这种反射，在某种程度上，就是比思考或者回忆更有效的应激反应，也就是说你可以省去思考或者回忆的过程，直接对某个场景做出编辑操作，例如：拷贝一段文字到另一端文字后面，删除替换某个词语，回到文件头部等等，你不用去想我该按哪些快捷键去做这些操作，你的双手很自然的就会敲击出正确的键法，省略了耗时的思考，回忆键法的过程，操作者的效率自然倍增。</p>

<p>Vi/Vim 的使用者往往会有这样神奇的体验：小白在你边上看你编辑文本，屏幕上的光标仿佛可以跟随人的眼睛和意念四处游走，操作者没有使用鼠标，完全用键法掌控编辑过程，这个时候小白经不住打断你，询问你怎么复制指定的段落，你往往不能马上回答，你需要重新把双手放回主键盘区，让你的手自然击键给出正确的答案，这就是我们之前说的条件反射替代了思考回忆，记住这个操作的是通过反复训练的肌肉而不是你的大脑，所以手可以迅速地给出答案，但是大脑没办法马上回答，它需要回忆动作，分解操作步骤，最后确认无误，再告诉你答案。通过刻苦的训练建立条件反射从而提高效率，提升技能水平，这其实和世界上其它的技能修行例如：乐器演奏，书法，外语没有任何区别。引申开去，如果你可以在日常生活中更多的运用这个技巧：建立更多的条件反射替代脑力决策，你就可以更高效，更轻松的完成任务。但是这其中又要有适应场景的辨别能力，经典条件反射其实连狗都可以做到，但是听到铃声没见到肉就开始流口水就上当受骗了。</p>

<p>坏消息是你仍旧需要刻苦的训练，好消息是比起乐器，外语等其它技能，练习Vi/Vim建立条件反射的时间并不很长大约在七天左右，花费七天的时间，换取受益一辈子高效编辑的能力，这实在是一笔合算的交易。况且这里面也没有智力差异的成分，如果觉得自己做不到，想想经典条件反射的实验对象其实是条狗，这个比喻虽然让人不好受，但是真的会很激励人，我自己当时在2006年的一个七天长假里练习Vi/Vim的时候基本就没把自己当人对待。练习的学习资料也唾手可得，很多同学满世界找书，找教程，素不知最有用的教程GVim已经自带了，安装完GVim以后，直接键入：
<code>
$ vimtutor
</code>
巧妙的地方在于，这份文本既是一个包含七个章节的学习指南，又是一份可以遍学遍练的习题册，你只需要通读这份文档并按要求操作即可，能够熟练的操作这份文档以后，练习者就具备了使用Vi/Vim编辑文本的基本能力，可以比较从容的使用Vi/Vim应对80%左右的编辑任务。但是在建立反射的初期一定要保证投入足够的时间和练习次数，否则功亏一篑，因此可以在第一遍通读练习完这份教程以后，反复练习这份教程七天左右。无论何时感到百无聊赖的时候，就调出这份教程从头到尾练一遍，保持手热的状态。
有了这个基础做保障以后，你应该尝试沉浸式的学习方法，也就是说，在编辑文本的时候，拒绝除了Vi/Vim以外所有的工具。不要有任何理由接触任何其它的编辑器，如果你是开发者，一定要使用某个IDE，那你也应该看看有没有这个IDE对应的Vim插件：对于主流IDE来说这都不是问题。随后练习者就会步入正轨，渐入佳境：用的越多就越熟练，越熟练就会更高效，更高效就越离不开Vi/Vim，直至开始学习更多Vi/Vim的高阶功能，或者引入更多插件满足更多的编辑需求。形成良性循环以后，一两年里就可以锻炼成高手，这个技能也会伴随你终生，随着时间的推移，你自己都忘记这是一项“很了不起的，很多人没学会”的技能。</p>

<p>以下是装上若干插件以后的效果图：</p>

<p><img src="/images/ubuntu_living_handbook/gvim-editor.png" title="gvim-editor screenshot" alt="gvim-editor" /></p>

<h2>搜索的艺术：find &amp; grep</h2>

<p>我们在前面的博客里反复强调了搜索的重要性，<strong>搜索优于导航</strong>是提升操作效率的一个关键问题。这里就介绍几个Linux下的常用搜索命令。回忆一下本机搜索的需求大致可以分为两大类：</p>

<ul>
<li>按文件名搜索文件</li>
<li>按文件内容中的关键字搜索文件</li>
</ul>


<p>在开始解说如何满足这些需求以前，我其实更想强调读者将<strong>搜索</strong>这个冲动根植在心里，没有这个冲动或者观念你就不会产生想要搜索的需求，大体上你也可以使用鼠标去到处翻文件夹完成等价的工作，区别在于你是想带着目的，付出一些记忆关键字的成本，用最快的速度找到想要的东西，还是漫无目的的浏览，心急火燎的到处乱窜。这里再提一个搜索的小技巧，可以让你直观的感受搜索的强大：在终端界面里有时不可避免的需要重复输入一串很长的命令，这个可能是使用终端的用户相对于GUI最大的抱怨，“反复输入这么长的命令很烦人”，“我怎么可能记得住那么长的命令”，这个时候，你可以只记住这串命令中的某几个关键字，然后在终端界面上按Ctrl-r进入搜索模式，键入你刚才记住关键字譬如gvim:
<code>
(reverse-i-search)`gvim': gvim 2013-01-07-ubuntu-efficient-software.markdown
</code>
这样系统会自动提示你之前输入过的和gvim相关的命令，如果不是你想要的，继续按Ctrl-r提示下一条命令，直至找到你想要的命令，按回车即运行，如果最终都没有找到按Ctrl-c退出搜索模式即可。这个技巧虽然很小但是非常实用，解决了我自己刚入门时一个很大的困惑：）。</p>

<h3>find: 文件名搜索</h3>

<p>find 命令可以按许多搜索条件来进行搜索文件，最常用的就是按文件名搜索：
<code>
$ find -name readme
./Dropbox/backup/eclipse/readme
./Dropbox/backup/windows/EnsoLauncher/readme
./TestProject/web-workspace/TestStruts/readme
</code>
上述命令指在当前目录下查找文件名是readme的文件，如果文件名过长你无法完全记住，可以选加通配符减小记忆负担例如：
<code>
$ find -name read*
./Dropbox/backup/eclipse/readme
./Dropbox/backup/windows/EnsoLauncher/readme
./TestProject/web-workspace/TestStruts/readme
</code>
更多用法参考 man：
<code>
$ man find
</code></p>

<h3>grep: 文件内容搜索</h3>

<p>grep 是很多有经验的开发者最常用的一个命令，如果你不知道文件在哪里，但是你知道文件中的几个关键字，你就可以把它找出来：
<code>
$ grep 搜索的艺术 * -r
source/_posts/2013-01-07-ubuntu-efficient-software.markdown:## 搜索的艺术：find &amp; grep
</code>
这个是我在本机搜索这篇博客当前小标题的结果， * 是指搜索当前目录的所有文件， -r 是指递归当前目录进行搜索。更多用法参考 man：
<code>
$ man grep
</code></p>

<h2>砍掉使用鼠标最后的借口：keynav</h2>

<p>使用一个Linux系统虽然在80%的状况下你可以没有障碍地使用键盘完成所有操控，但是仍然可能会有一些只能使用鼠标的状况出现，例如：某个GUI软件没有提供相应的快捷键，或者即使提供了，你还不清楚。这个时候可以调出 <a href="http://www.semicomplete.com/projects/keynav/">keynav</a> 这个软件，砍掉使用鼠标的最后一个借口。<a href="http://www.semicomplete.com/projects/keynav/">keynav</a> 被用来替代鼠标点击屏幕上的任意一个像素。它的设计思想是这样的：运用键盘快捷键，它可以显式的将整个屏幕分割成四个区域，然后输入hjkl代表左下上右（很耳熟？）像两分法那样，把整个屏幕分割成左一半或者下一半或者上一半或者右一半，在当前的半个屏幕内重复输入hjkl持续进行屏幕的两分操作，这样显式高亮的区域会越来越小（多一次分割面积缩小一半），一直小这个区域的中心点和你想点击的目标区域重合，这个过程就是模拟鼠标从当前位置移动到目标位置的过程，此时再次键入快捷键完成模拟鼠标点击的动作即可，这样理论上，在没有更好选择的情况下，你就可以使用键盘模拟鼠标完成任意点击工作，进而避免双手在主键盘区和鼠标之间的来回切换，节省宝贵的操作时间。那么这样做效率如何？根据计算，在一块分辨率为 1920x1200 的屏幕上（适用屏幕尺寸在24英寸以上），点击屏幕上任意一个像素的最坏情况是击键21次做两分法分割屏幕的动作，这个结果有点糟糕，但是实际上，不是每个人都有那么大的屏幕（适合文本工作的显示器大小是22英寸，可以得到最佳字点距，此时分辨率大小为 1680x1050），再者，就算是鼠标，也没有认定需要精确到一个像素的大小才可以点击，我们点击的对象往往是一个像素区域，例如：一个工具栏，一个按钮，一个文本框，这样以点击按钮为例：按钮占据60x25个像素区域，在1920x1200的屏幕上最差需要击键11次完成定位。这个只是最差情况，以笔者22英寸显示器的使用经验来说，4到5次击键即可完成定位，效率不会比鼠标更高，但是完成定位点击的耗时绝对不会比省下切换鼠标的时间更多。至此，我们完成了使用 <a href="http://www.semicomplete.com/projects/keynav/">keynav</a> 替代鼠标的理论验证和实践证明，读者不妨可以大胆拔掉鼠标。</p>

<h3>安装配置与入门</h3>

<p>Ubuntu 的官方源默认自带这个软件：
<code>
$ sudo apt-get install keynav
</code>
配置文件位于：~/.keynavrc 可自行修改快捷键。</p>

<p>另外你可以设法让这个软件随机启动：
<code>
$ vi ~/.xprofile
</code>
加入一行：
<code>
keynav
</code>
重新登录系统即可。</p>

<p>首次启动后，按 "ctrl + ;" 激活显式高亮区，再按hjkl移动定位，最后按空格键模拟鼠标点击。掌握这个软件并不需要太长时间，可以参考 <a href="http://www.semicomplete.com/projects/keynav/">官网</a> 和 <a href="http://www.semicomplete.com/projects/keynav/keynav.html">demo</a> 演示。</p>

<p>更多用法参考 man：
<code>
$ man keynav
</code></p>

<h2>文本浏览器：w3m</h2>

<p>在这个GUI横行的世界，笔者推荐一个兼容中文的文本浏览器：w3m，你需要一个文本浏览器的理由：</p>

<p><strong>1. 速度和专注</strong></p>

<p>无需加载图片，加载速度更快，使用户专注文字内容本身，适合比较纯粹的文字阅读，特别是文档查阅。</p>

<p><strong>2. 运行在终端界面</strong></p>

<p>它很酷，只需要 bash shell 终端就可以运行，也就是说你是在命令行里上网，即使没有GUI图形系统，也不能阻碍你访问 Web，在许多场合这很重要：</p>

<ul>
<li>无法进入图形界面需要上网搜索方案</li>
<li>ssh远程登录到某个主机的时候需要直接在那台主机上下载文件，或许那台主机的网速比较给力也没有墙，你也可以避免先在本地下载，再把文件传送到远程机，所以你需要在远程机的终端里直接访问 Web。</li>
</ul>


<p><strong>3. 全键盘操作</strong></p>

<p>终端界面的另一大好处是无法使用鼠标，这就迫使你使用键盘操控文本浏览器，提升浏览效率。而且如果你会使用 Vi/Vim，那么操控 w3m 的体验和 Vi/Vim 高度相似(使用hjkl移动光标，/keyword 查询关键字等等)。</p>

<p><strong>4. 格式渲染，中文支持完善</strong></p>

<p>使用 w3m 的 web 渲染效果很美观，用 w3m 访问 gmail 的效果图：</p>

<p><img src="/images/ubuntu_living_handbook/w3m-gmail.png" title="w3m gmail" alt="w3m-gmail" /></p>

<h3>安装配置与入门</h3>

<p>安装 w3m 非常简单：
<code>
sudo apt-get install w3m
</code></p>

<p>如果想更改部分快捷键，例如：更改上下翻页的快捷键和 Vi/Vim 的翻页快捷键一致（Ctrl-d，Ctrl-u），可以新建文件：
<code>
vi ~/.w3m/keymap
</code>
输入以下内容，重新绑定快捷键：
<code>
keymap C-d NEXT_PAGE
keymap C-u PREV_PAGE
</code></p>

<p>安装完毕以后，打开终端输入：
<code>
$ w3m http://www.douban.com
</code>
即可访问豆瓣，hjkl：移动光标，/keyward回车：搜索关键字并定位光标到目标对象，如果目标是一个链接，直接回车即可跳转。持续的按Tab键则可以自上而下的切换当前页面上的链接，回车可以跳转，按Tab+Shift则自下而上反向切换。最最基本的功能就是这些，如果想查看更详细的功能，打开 w3m 后按 Shift+h 查看快捷键。</p>

<h2>屏幕管理器：tmux</h2>

<p>作为一个以命令行终端为基础的操作系统，有效率的Linux用户会花费大约30%以上的时间在自己的终端界面上，一个功能强大，用户友善的终端界面管理软件会显得很贴心。这里笔者介绍一下 tmux 这个软件。tmux 是一款用于管理终端界面的程序，主要功能有以下几个：</p>

<p><strong>1. 可分割，多Tab的终端窗口</strong></p>

<p>在一个整块的屏幕终端界面上切分出任意多个子窗口，例如：你可以在屏幕的左半个区域里编辑文字，右半个区域里查看资料，提高屏幕空间的利用率，用户可以在一屏的空间里同时看到两个终端的内容，节省切换终端的麻烦，这个功能在大屏幕时代相当实用。好像现代浏览器的Tab概念类似，tmux里也可以方便的新建，切换，关闭不同的Tab代表不同的终端。有了可分割和多Tab的终端，这样你就无需为了不同的目的开启多个终端界面，尤其在登录到远程主机的时候很有用：避免反复开启本地终端远程连接主机或者不停将前台程序切换到后台运行为了腾出当前终端的控制权，你只需要一个远程连接就可以随意开启任意多个终端，并且在这些终端里快速切换。</p>

<p><strong>2. 复制终端文本</strong></p>

<p>传统的终端界面，只能使用鼠标复制界面上的文本，tmux 的一个附加福利是允许你用键盘进入编辑模式，复制粘贴终端上的任何文本。例如你正在终端里编辑一个文档，里面需要一个很长的路径，你可以划分出一个新终端，运行获取路径的命令，然后把结果复制到原先终端的编辑器里。期间的光标移动和搜索命令仍然是Vi/Vim类似的hjkl/等。</p>

<p><strong>3. 保留终端屏幕会话</strong></p>

<p>使用ssh远程登录到一个主机上使用终端的同学如果正在跑一个非常耗时的命令，这个时候除非你把它切换到后台运行，否则当你登出主机的时候这个任务也会被自动停止，非常不方便，你可使用tmux的dettach功能将屏幕会话保存起来，然后登出主机，下次重新登录到主机的时候使用tmux attach命令把上次保存的会话恢复回来。又假设你在办公室里终端上的工作仍然没有结束，但是下半时间到了，需要去赶班车，这个时候你还是可以dettach当前的屏幕状态，等到家以后ssh远程连接到公司电脑，tmux attach恢复离开公司时候的终端状态，继续当时的工作，就好像你又回到了办公室的机器前一样。</p>

<h3>安装配置与入门</h3>

<p>运行安装：
<code>
$ sudo apt-get install tmux
</code>
配置文件位于：~/.tmux.conf，可以编辑此文件，将其中的 <strong>set -g prefix C-b</strong> 改作 <strong>set -g prefix C-a</strong> C-a代表了Ctrl+a，是一个前缀键，所有的tmux快捷键都需要先按这个前缀键才能工作，因为Ctrl+a比起默认的Ctrl+b更方便按键，所以有了这个微调。</p>

<p>启动tmux，在终端里执行：
<code>
$ tmux
</code>
即可进入tmux界面，按下 C-a v 做垂直方向的分屏，C-a s 做水平方向的分屏，这个分屏动作可以一直持续。C-a h,j,k,l 移动光标至左下上右四个方向上的相邻分屏，键入 exit 退出某个分屏，最后 C-a d 可以dettach整个tmux会话，如果需要恢复这个会话，只需要在终端键入：tmux attach</p>

<p>以下是一个分割出四个区域三个Tab的 tmux 效果图，注意图片左下角绿色状态栏的三个单词代表了三个Tab，带*号的Tab表示当前Tab，黑色高亮的那两个单词表示另外两个非当前Tab的终端内容有变化，例如你在当前Tab内编辑文本，在另外的Tab里如果有log输出，那么就会有黑色背景提醒你需要查看变化。图片右下角的状态栏上同样很贴心的给出了当前系统时间和计算机的hostname：</p>

<p><img src="/images/ubuntu_living_handbook/tmux-sc.png" title="tmux screenshot" alt="tmux-sc" /></p>

<h2>火狐的瑞士军刀：Vimperator</h2>

<p>除了终端以外，另一个使用率超高的软件非浏览器莫属，在我们这个时代，很多人开机恐怕就是为了打开浏览器，如果你会有50%的时间生活在浏览器里，那就应该想想怎么在浏览器里提高自己的生活质量了：好在我们有Vimerator。Vimperator是一个由 Vim 获取灵感的 FireFox 插件，完全颠覆了使用浏览器的传统观念。它的设计目标就是像Vim那样使用键盘操控浏览器，并且兼容Vim操控的<strong>标准规范</strong>：你可以使用Vim的快捷方式。只是想象一下使用键盘无须鼠标你就可以操控浏览器，这有多炫目！个人认为无论怎么赞美这个插件的伟大都不会过分，它存在的意义已经超过了火狐浏览器本身，许多用户可能会对火狐浏览器本身颇有微词，但是这个插件的出现使得火狐本身的缺陷不再那么重要，无论是chrome或者IE，在没有同等分量的插件出现以前，很难说服习惯Vimperator的用户迁移到其它浏览器。</p>

<p>希望chrome的粉丝可以压住自己的火气，我们再讲一些道理。</p>

<p>我在前面的博文里提到过这样一个观点：我们不是在一个茹毛饮血的蒙昧年代，几十年前电脑低下的计算能力甚至都无法满足纸带输入的速度，人有充裕的输入带宽，而计算机的接收带宽则相当狭窄，无法提高效率的责任和瓶颈在机器那边，人往往需要等待机器。今时今日则大不一样，人和机器的地位逆转，一代一代的芯片技术革新，使得机器有足够的处理带宽完成人类给定的任务，并不是机器太慢无法处理足够多的任务，而是我们人类的思维速度，反应速度和操作速度无法喂饱机器强大的处理能力。如果觉得效率有问题，那么责任在我们这边，我们才是瓶颈。你应该让自己更聪明，更快的思考，更准确的思考，更有效率的操作。提升自己的一个方法就是付出脑力成本，刻苦的训练，建立适应场景的条件反射。也许火狐的渲染加载速度确实不如chrome，但是如果它的任何操作都无需导航或者鼠标导向，那么一个训练有素的用户，仍然可以从每一次点击，关闭，新建，搜索，复制，跳转这些最基础的操作速度上受益，积累效率优势，最后不但弥补了火狐本身的性能问题，还可以用十倍以上的工作效率完胜chrome。</p>

<p>想清楚这个道理，这个是我们进行选择的前提。下面谈谈 Vimperator 的几个特色功能：</p>

<p><strong>1. Vim 兼容</strong></p>

<p>所以讨论火狐快还是chrome快没有意义，软件对于渲染速度的差别微乎其微。关键在于哪个平台可以提供让人更快的工具。Vimperator就是火狐给出的答案--火狐再不好，好在它有强大的插件系统，插件生态圈和开发者的历史积累。Vimperator最聪明的做法还是遵守兼容了Vim对于键盘操作计算机的规范。降低了用户的学习成本。你还是可以例如：使用 h，j，k，l来翻页，/ 来搜索。</p>

<p><strong>2. 快速访问常用网站</strong></p>

<p>在当前网站的页面上你只需要下shift+m，然后再按下某个字母数字键，比如：你在新浪首页，按下shift+m后，再输入s，这样s就指带了新浪的网站，下次你需要访问新浪的时候，无需输入网址，只需要按三个键：gns 浏览器随即打开新的Tab加载新浪页面。</p>

<p><strong>3. 革新的浏览器人机交互</strong></p>

<p>Web 最重要的特征就是可以跳转的链接。Vimperator 充分考虑了浏览器的人机交互特征，如果你没有使用过类似的工具，你也许可以想象使用快捷键在浏览器里翻页，滚屏，前进，后退，但是你可能无法想象如何使用键盘点击网页上的链接。看看 Vimperator 的做法，这是一个很讨巧，很聪明的做法：</p>

<p><img src="/images/ubuntu_living_handbook/vimperator_hints.png" title="vimperator hints screenshot" alt="vimperator-hints" /></p>

<p>装完这个插件以后，按下 f 键，页面上所有可以点击的对象包括：链接，图片，文本，按钮都被显式高亮，并且标上数字记号。这个时候你只需要在键盘上按下相应的数字就代表了一次鼠标点击。你也可以使用搜索关键字的方法，定位到一个链接，然后直接回车跳转。这远比一次鼠标导航要高效。</p>

<p><strong>4. 整合的垂直搜索</strong></p>

<p>再来看看Vimperator的搜索功能：强大到恐怖的搜索。传统搜索引擎的需求实际上正在被更垂直的搜索请求取代：如果我想买个手机，我可能会去淘宝的搜索栏进行搜索。如果我想了解某个专业问题的答案，我可能想去社区问答网站比如：知乎，quora 寻找专业意见。书评或者影评可能在豆瓣上会更靠谱。搜索一个英文单词的含义用法可能在dictionary.com 云词这类在线词典上更好，它无需本地词库还可以反复复习。科普知识我会用维基百科查询。我们需要一个工具统一解决这么多的垂直搜索需求请求！Vimperator这样给出答案：无论你在哪个当前页面，按下 t 键进入命令模式：</p>

<p>:tabopen t galaxy note回车</p>

<p>浏览器随即跳转至淘宝的的galaxy note搜索结果页面，你无需敲击淘宝网址，无需在搜索框里输入，你只要记住命令中的 t 代表了淘宝。而且这种搜索引擎可以无限扩展内置，你可以将任意需要垂直搜索的网站加入，附上t这样的关键字即可。（注：淘宝系我手工加入的搜索引擎，默认情况下你未必可以实现淘宝搜索）如果你仍然需要最常用 Google 搜索，则更简单一些：按下 t 键进入命令行模式：</p>

<p>:tabopen galaxy note回车</p>

<p>以上只是 Vimperator 众多令人炫目的功能中的几个，读者可以依据帮助文档自行学习挖掘。使用火狐浏览器点击<a href="https://addons.mozilla.org/en-US/firefox/addon/vimperator/?src=search">vimperator-addon</a>安装插件，重启浏览器后输入：</p>

<p>:help回车</p>

<p>想成为一个更有效率的人？从阅读使用指南开始：）</p>

<p><strong>未完待续......</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu桌面生存指南 (4) --- Ubuntu系统备份恢复升级策略]]></title>
    <link href="http://ghosertBlog.github.com/blog/2012/12/04/ubuntu-living-handbook-backup-restore/"/>
    <updated>2012-12-04T20:10:00+08:00</updated>
    <id>http://ghosertBlog.github.com/blog/2012/12/04/ubuntu-living-handbook-backup-restore</id>
    <content type="html"><![CDATA[<h2>Ubuntu系统备份恢复升级策略</h2>

<p>继续上篇的内容，在最初使用开发者系统的时候，无论是<a href="/blog/2012/10/30/ubuntu-living-handbook-install/">构建Ubuntu系统基础设施</a>，还是安装配置各种软件都是一个费心劳力的过程：由于开发者系统是一个需要付出脑力成本换取高效率的系统，它因此被设计成一个高可定制又极度自由的系统，暂且不说你可以自由地从编译源码的方式配置安装整个操作系统，即便是大多数的常用软件例如：vi，emacs等等通过变更配置文件都可以玩出无数的操作方式，用户需要花费时间去变更尝试这些配置，使得操作这些软件的方式最符合自己的习惯，达到高效的目的。因此经过一段时间调配，每一个Linux用户都会有一个自己专属的高效系统，有1000个用户就会有1000个专属高效系统，每一个系统上安装的软件和配置方法都各不一样，并且每一个用户在打造这个专属系统的过程中都会耗费大量的精力和时间。丢失自己的专属系统，就意味着时间精力的丢失，对于一个长期使用Linux的用户更是如此：用户已经在这个系统上积累太多软件和操作习惯，如果因为系统崩溃而需要从头开始配置一个全新的系统，在事前又没有任何备份措施，那剩下的简直就是一场灾难。这也是有经验的Linux用户很注意备份的原因。介于此，笔者在本章节结合自己的一些经验来介绍一下Ubuntu系统的备份恢复以及升级策略:</p>

<ol>
<li>脚本恢复策略 --- 完全格式化更新</li>
<li>脚本恢复策略 --- 沿用/home分区数据</li>
<li>tar包全盘备份恢复策略</li>
<li>迁徙wubi系统到物理分区</li>
<li>Ubuntu系统升级策略</li>
</ol>


<p>这些备份恢复策略不仅适用于Ubuntu，对于使用其他发行版的Linux用户，同样可以参阅以下内容，对其中的步骤稍加改造即可。</p>

<!--more-->


<h2>脚本恢复策略 --- 完全格式化更新</h2>

<p>我们前面介绍过Ubuntu系统的一个特色就是可以从自己的源通过<strong>apt-get</strong>命令来下载需要的软件，因此用户可以建立一个脚本文件，通过写入常用的<strong>apt-get install</strong>命令的方式来备份需要的软件(参见<a href="/blog/2012/10/30/ubuntu-living-handbook-install/">上一篇</a>中的<strong>在云端保存一个软件安装的脚本</strong>部分)，同时在这个脚本文件中加入某些需要手工干预的个性化配置的具体步骤，例如：更改激活拼音输入法快捷键的具体步骤(大多数拼音输入法抢占了ctrl+space，如果不更改，开发者用户就无法在诸如Eclipse这样的IDE里使用这个快捷键激活智能代码提示的功能)，又例如：你可能对 Firefox 的默认字体并不满意，需要替换一下，这些详细的步骤都应该以注释的形式记录在这个脚本里，如果这些步骤实在太过繁琐，也可以在配置以后，找到对应的配置文件，直接保存在Dropbox里，方便今后直接从云端恢复这些配置到本机。例如，你自己定制化了Vim的行为并且加装了Vim插件，那你只需要将~/.vimrc ~/.vim备份在云端即可。</p>

<p>所以一旦建立了这样一个脚本文件，即使需要重装系统或者面对一台全新的计算机，只需要执行这个脚本文件，查看脚本里的注释记录，就可以保证软件没有丢失，配置软件的步骤可以还原，重要的资料都被存储在云端：Dropbox（二进制文件），GitHub（文本文件，以后详述）。自然这个策略的前提是：你在使用系统的时候必须保持勤于更新脚本的习惯，用于日后的系统恢复。</p>

<p><strong>优点</strong></p>

<p>这种方法比较适用于希望将现有系统迁徙到更高版本的情形。例如：迁徙 Ubuntu 10.04 至 12.04的时候，在格式化系统，重新安装12.04以后，用户就可以通过这个脚本恢复原先计算机的面貌。并且由于Ubuntu源里的软件版本和Ubuntu发行版版本之间存在对应关系(例如：10.04源里的firefox版本可能在某个版本以后不再提供更新)，如果12.04在目前还是一个比较新的LTS版本，那么就可以保证在12.04上使用<strong>apt-get install</strong>安装的软件版本都比较新。同时如果你大多数的配置恢复是通过还原具体步骤完成的，那么就有机会检查这些步骤在新版本软件上是否仍旧适用。也不会出现从云端恢复旧版本软件的配置到新版本软件以后无法适用的状况，当然理论上这也不是一个太大的问题，Linux下许多著名的软件都非常尊重用户的旧有习惯，轻易不会变更自己读取配置文件的方式，大多数情况下恢复旧有软件的配置到新版本不会出现太多状况。</p>

<p><strong>缺点</strong></p>

<p>由于没有采用全盘备份的方式，这种备份恢复策略的缺点同样明显，尽管可以保证在升级以后，计算机的原始面貌不会有任何丢失，但是相对来说，手动恢复许多软件的配置仍旧需要投入相当的时间和精力，即使在备份策略完善的前提下，笔者通过这种方式将Ubuntu 10.04升级到12.04的时候仍然花费了整整5天的国庆长假。因此个人建议只在每隔两年发布一次的LTS版本出现的时候才做这样的升级，以此保证计算机的全新状态。</p>

<h2>脚本恢复策略 --- 沿用/home分区数据</h2>

<p>我们前面提到过独立/home分区的原因在于用户大多数重要的个性化配置和数据都保存在这个目录，以至于Ubuntu官方的云端备份软件Ubuntu One在默认情况下就是协助用户备份/home分区所在的数据到云端。因此如果可以在重装系统的时候沿用这个分区的数据，无疑可以为我们节省大量的数据恢复和配置恢复的时间，更何况某些数据如电影，照片可能占据几百个G的空间，没有独立/home分区，用户在重装系统，格式化分区的时候根本就没有可以容纳那么大数据的第二个媒介做临时的备份，除非你有第二块硬盘。另一方面在恢复系统的时候因为配置和数据仍旧在/home目录，你只需要执行前面提到的脚本重新安装软件即可，无需手工还原配置软件的步骤。</p>

<p>为了使用这种恢复策略，在首次安装Ubuntu的时候可以参考<a href="/blog/2012/10/30/ubuntu-living-handbook-install/">上一篇</a>博客的分区推荐方案独立出/home分区，在使用系统的过程中时刻保证只在这个目录下存储自己重要的数据和配置，如果一定有一些特例状况也一定要在恢复脚本中加以记录，在云端有另外的备份措施。只要你的/home分区没有被损坏，再次恢复的代价就相当的小。重装系统的时候可以格式化 / 目录所挂载的分区，但是记得在以下Installation type界面上千万不要选择格式化 /home 所在的分区，否则就无法沿用这个分区的数据。</p>

<p><img src="/images/ubuntu_living_handbook/installation-type.png" alt="installation-type" /></p>

<p><strong>优点</strong></p>

<p>显而易见，这种策略很经济，省去很多的麻烦，是非常常见的系统恢复策略，同样也适用于在重新安装一个高版本的Ubuntu以后恢复计算机原先的面貌，例如从10.04LTS升级至12.04LTS。</p>

<p><strong>缺点</strong></p>

<p>沿用过去/home分区的数据毕竟在保留了数据的同时也保留了旧有的配置和目录结构，如前所述虽然在匹配新版本软件的时候，这不会是一个太大的问题，但是一旦出现状况，例如两个软件版本之间的差异过大，导致新版本无法正常工作在旧配置或者目录结构上，用户要有一定解决问题的能力，仍然需要通过查看脚本注释手动还原配置步骤。</p>

<h2>tar包全盘备份恢复策略</h2>

<p>上述两种恢复策略免不了还是需要在分区以后，插入启动U盘或者光盘，从头开始安装操作系统本身，并且安装完操作系统以后继续安装软件，恢复配置，熟悉Windows下大名鼎鼎的Ghost的同学一定在想，Ubuntu下是否也有这种一站式的全盘备份方案：无论计算机系统当前的状态，我可以对整个系统的每一个字节都做数据备份，当需要恢复系统的时候甚至都不必再次安装Ubuntu本身就可以把当初备份的那个状态复原到新的机器或者格式化以后的当前机器上，甚至是虚拟机上。这也是一般公司的IT部门在帮员工重装机器的时候最常用的策略，没有其它原因，就是因为这种方式最快捷。备份恢复一个系统的时间不会超过一个小时。</p>

<p><strong>优点</strong></p>

<p>最迅速快捷的备份恢复方式，可以通过刻录母盘的方式在各处恢复自己的备份。你既可以在一台物理机上做备份恢复到另一台物理机或者虚拟机，你甚至也可以将一台虚拟机里的备份恢复到一台物理机或者另一台虚拟机上，非常的灵活方便。</p>

<p><strong>缺点</strong></p>

<p>采用这种方式的一个问题在于，如果需要还原的目标机器和做备份的源机器硬件配置差异过大，可能会发生恢复以后某些驱动程序工作不正常的状况，例如计算机没有声音，或者图形分辨率特别低，无法联网等状况。这个时候需要用户自行尝试解决。第二个问题在于由于全盘备份，意味着如果你备份的是10.04的系统，那你也只能恢复到10.04的系统，这种恢复方式没有办法升级你的Ubuntu到更高的版本。第三个问题：一定的学习实践成本，以下就我个人的实践经验提供tar包全盘备份的基本步骤和原理，也许你在网络上可以找到更方便的脚本或者备份软件替代这些工作，但是如果遇到问题回到这些具体的步骤和原理可以帮助你了解到底是哪里出了问题，怎么解决这些问题。</p>

<p><strong>1. 全盘备份</strong></p>

<p>得益于Linux系统强大的命令行和系统设计，全盘备份一个Ubuntu系统的基本原理相当简单：使用tar命令打包必要的文件目录即可，也就是说备份系统和备份数据基本没有区别。</p>

<p>新建一个脚本文件BACKUP_SYSTEM.sh，在其中添加以下内容：</p>

<p><code>
mkdir ~/BACKUP_SYSTEM
sudo tar --exclude /proc --exclude /mnt --exclude /tmp --exclude /media --exclude /home/jiawzhang/Downloads --exclude /home/jiawzhang/Templates --exclude '/home/jiawzhang/VirtualBox VMs' --exclude /home/jiawzhang/BACKUP_SYSTEM -jpcvf ~/BACKUP_SYSTEM/Ubuntu-12.04-20121114-home-pc.tar.bz2 /
</code></p>

<p>这两条命令首先在home目录新建了一个BACKUP_SYSTEM的目录用于放置备份后的tar包。随后tar命令的 --exclude 参数排除了某些你认为没有必要进行备份的目录，例如 Download, Templates 目录，同时我的案例里也排除 VirtualBox VMs 这个目录，因为安装虚拟机以后，Virtualbox所在的这个目录会极度膨胀，我们没有必要把几十个G的虚拟机镜像全都备份进tar包。-jpcvf 这个命令中：j 表示使用 bzip2 格式打包，这是一种压缩耗时但是压缩比很高的格式，经常用于压缩大数据。p 表示在制作tar包的时候保留目录结构的用户权限信息，最大程度的对文件系统做现场保护。cvf 表示创建一个压缩包，并且列出详细的压缩过程。~/BACKUP_SYSTEM/Ubuntu-12.04-20121114-home-pc.tar.bz2 指定了压缩包的文件名，我个人偏向于在这个文件名里写清楚版本信息，打包的时间和在哪一台机器上做的备份，有助于今后做恢复操作。这条命令的最后有一个 “/” 字符就是表示从本机的根目录开始做全盘备份，你本机的所有东西除了被 --exclude 的目录都会被打进最终的压缩包。即使是全盘备份，事前一定要甄别清楚到底哪些目录是没必要备份的，否则压缩和解压过程都会变得无法接受的漫长。</p>

<p>开启终端运行 sh BACKUP_SYSTEM.sh 开始备份。取决于用户备份数据的多少和硬件配置的好坏，备份的时长会有所不同。在笔者本机上，去除非必要目录的全盘备份花费了大约1个小时，把 40G 的资料压缩在 9G 大小的压缩包内。如果你想时刻了解压缩的进度，可以开启另一个终端，运行以下命令：
<code>
watch -d -n 5 ls -alh ~/BACKUP_SYSTEM/
</code>
这个watch命令用于每隔5秒执行一遍随后的 'ls -alh ~/BASHUP_SYSTEM/' 幷高亮出两次执行之间的不同，因此你可以观察到正在制作中的压缩包大小的变化。</p>

<p><strong>2. 全盘恢复</strong></p>

<p>恢复系统的步骤会比备份繁琐许多，以下是主要步骤，我会尽量解释每个步骤的含义。</p>

<ul>
<li><p>确保事先备份的压缩包在某个分区可以被访问到，这里假设你的备份压缩包位于/home/jiawzhang/BACKUP_SYSTEM/UBUNTU-2012-02-05.tar.bz2</p></li>
<li><p>通过Ubuntu的启动U盘或者光盘重启电脑，进入试用Ubuntu的模式。</p></li>
<li><p>在试用模式的Ubuntu中开启终端，运行命令
<code>
sudo su -
</code>
切换至 root 权限，取得 root 权限以后类似 fdisk -l, df -h 这些命令才能返回准确的结果。</p></li>
<li><p>运行命令
<code>
sudo gparted
</code>
打开Linux下的分区软件gparted，如果提示需要安装，则运行
<code>
sudo apt-get install gparted
</code>
之后可以按照<a href="/blog/2012/10/30/ubuntu-living-handbook-install/">上一篇</a>博客的分区推荐方案进行分区，如果你对自己的分区已经满意，也可以略过分区的步骤，只需要格式化 / 所在分区即可，/home 所在分区因为用于存放备份压缩包，可以选择暂时不做格式化。</p></li>
<li><p>解压备份压缩包
<code>
mkdir /tmp/root
mkdir /tmp/root2
mount /dev/sda1 /tmp/root
mount /dev/sda2 /tmp/root2
cd /tmp/root2/jiawzhang/BACKUP_SYSTEM/
sudo tar -jpxvf UBUNTU-2012-02-05.tar.bz2 -C /tmp/root
</code>
使用U盘启动到live Ubuntu模式幷不会实际上挂载你的物理分区，所以这里需要使用mount命令手动挂载你刚才格式化以后的 / 分区并且将压缩包解压导入。新建两个目录/tmp/root /tmp/root2，将分区/dev/sda1 /dev/sda2分别挂载到这两个目录。确保sda1是系统恢复以后挂载 / 目录的分区，sda2是原来/home目录挂载的分区，其中有我们需要的备份压缩包存在。挂载完毕以后，/tmp/root 对应了 sda1 分区，/tmp/root2 对应了 sda2 分区，进入 /tmp/root2/jiawzhang/BACKUP_SYSTEM 就是我们原先的备份存储的位置。运行 sudo tar -jpxvf xxx.tar.bz2 -C /tmp/root 做解压操作，jpxvf 中的 x 指解压，-C /tmp/root 则指定了需要解压的目标目录，这里实际上就是 sda1 分区所在的根目录。完成这个操作以后，所有的数据就已经被还原到 sda1 分区。你应该可以查看到类似 /tmp/root/etc， /tmp/root/home/ 这样的目录，它们对应的目录就是原先的 /etc， /home。我们下面的步骤会指定启动系统的时候把 sda1 分区挂载回 / 目录，sda2分区挂载回 /home 目录，这样在系统的目录结构就完全恢复了。另外由于/home目录对应的 sda2 分区之前没有进行过格式化操作，<strong>此时你可以选择删除/tmp/root2/jiawzhang/下除了BACKUP_SYSTEM以外的所有数据</strong>，然后运行
<code>
cp /tmp/root/home/. /tmp/root2/ -r
rm /tmp/root/home -rf
</code>
将刚才从备份压缩包中解压出的/tmp/root/home部分的数据重新拷贝到/tmp/root2，然后删除/tmp/root/home，即完成了从sda1分区转移恢复后的home数据到sda2分区的工作：sda2 分区是过后用来挂载 /home 目录的分区，理应把home下的数据恢复在这个分区。</p></li>
<li><p>恢复分区的 GRUB/MBR 信息</p></li>
</ul>


<p>经过格式化，分区等等步骤以后，即便你是在现有硬盘上恢复自己的系统，分区的 uuid 都可能已经被改变，因此当初备份在压缩备份包里的启动引导信息诸如：GRUB/MBR都已经不再和目前实际的信息相匹配，我们因此要做修复工作。</p>

<p>仍旧在 live ubuntu 模式下运行：
<code>
$ sudo add-apt-repository ppa:yannubuntu/boot-repair
$ sudo apt-get update
$ sudo apt-get install -y boot-repair
$ sudo boot-repair
</code>
下载运行启动修复软件 boot-repair，启动后点击默认推荐方式即可。如果想了解这个软件具体做了哪些工作，可以在这里参看<a href="http://ubuntuforums.org/showthread.php?t=224351">手工修复</a>的步骤。不过由于笔者并未验证其正确性，不能保证一定可用。
<code>
$ ls -al /dev/disk/by-uuid
</code>
再次查看各个分区的 uuid 信息，确保这些 uuid 和 /tmp/root/etc/fstab 中使用的 uuid 一致， 需要挂载的 /， /home，swap 在 /tmp/root/etc/fstab 中也和相应的 uuid 匹配。因为我们恢复的备份使用的是旧有的 uuid 信息，如果不一致：手工打开/tmp/root/etc/fstab这个文件做更正，主要工作就是替换其中的 uuid 字符串和上述命令中的一致。在启动系统的时候，/etc/fstab 这个文件指定了分别挂载sda1 sda2 sda3分区到 /，/home，swap，如果没有正确的 uuid 以及分区目录挂载匹配，系统就无法正确启动。大家可以大致参看一下 /etc/fstab 这个文件的内容片段：
```</p>

<h1>/ was on /dev/sda1 during installation</h1>

<p>UUID=f381f8cd-ca11-4227-b9ce-8de330bf0e9f /               ext4    errors=remount-ro 0       1</p>

<h1>/home was on /dev/sda2 during installation</h1>

<p>UUID=b4b376c7-9ef0-48dc-9f50-28decd899190 /home           ext4    defaults        0       2</p>

<h1>swap was on /dev/sda3 during installation</h1>

<p>UUID=d770aa08-a3f3-4469-a682-f161cff16135 none            swap    sw              0       0
```
另外如果你加装第二块硬盘以后也可以通过 'ls -al /dev/disk/by-uuid' 查看新硬盘的 uuid，幷新建这块硬盘分区对应的挂载目录以后，将这些信息一并写入 /etc/fstab，这样，系统在启动以后就会自动加载你的新硬盘分区。</p>

<ul>
<li>重建系统目录</li>
</ul>


<p>这些目录就是我们当初做备份时加在 --exclude 参数后面的目录。
<code>
mkdir /tmp/root/proc /tmp/root/mnt /tmp/root/tmp /tmp/root/media
chmod 777 /tmp/root/tmp
</code>
记得一定要赋予 /tmp/root/tmp 777 权限，这是一个系统级别的临时目录，需要完全的读写权限，否则你的系统无法启动成功，我自己在最初实践全盘备份恢复的时候就因为忽视了这个小细节，导致屡次恢复系统失败，差点放弃。</p>

<ul>
<li>重启计算机</li>
</ul>


<p>关闭计算机，幷从硬盘重启计算机，一切顺利的话，全盘恢复已经成功，至此，你可以别无二致的使用备份当时的专属高效系统了。</p>

<p>全盘备份恢复的操作对初学者来说有一定的风险，如果担心操作不当丢失数据，可以先在虚拟机环境里练习，笔者实践过这种方法对虚拟机一样适用。</p>

<h2>迁徙wubi系统到物理分区</h2>

<p>另外有一些用户最初是在Windows上通过Wubi的方式试用Ubuntu，最后决定彻底抛弃Windows的时候才发觉已经在Wubi里积累了太多的软件和配置，重装系统的代价很大，笔者自己最初也是在Wubi系统中操练Ubuntu，一年半以后才正式迁移到独立分区，彻底告别Windows。所以这里简要介绍一下如何将一个Wubi系统移植到物理分区。</p>

<ul>
<li>新建分区</li>
</ul>


<p>在Windows下使用分区工具从现有的分区中划分出两个分区，假设分别叫做 /dev/sda5 用作安装系统， /dev/sda6 用作 swap 分区。（如果需要独立的/home分区，可以再多分一个）</p>

<ul>
<li><p>进入Wubi系统</p></li>
<li><p>下载运行移植脚本</p></li>
</ul>


<p><a href="/files/wubi-move.tar.gz">点击下载</a>Wubi移植脚本后解压运行
<code>
sudo zxvf wubi-move.tar.gz
sudo bash wubi-move.sh /dev/sda5 /dev/sda6
</code>
如果有独立的/home分区，读者可参考前面<strong>解压备份压缩包</strong>小节中恢复/home分区数据的部分。</p>

<ul>
<li>重启计算机</li>
</ul>


<p>一切顺利的话，系统会出现Grub引导菜单，你可以通过选择菜单选择进入Windows还是物理分区上的Ubuntu系统，这个Ubuntu系统的内容和你的Wubi系统也同样地别无二致。</p>

<p>这个脚本的使用方法和更新也在持续进行中，目前支持从Ubuntu 8.04 到 12.04 之间的所有版本。这里只是做了一些摘要，读者可以自行访问<a href="http://ubuntuforums.org/showthread.php?t=1519354">Ubuntu Forums</a>查看这个脚本更多的用法和其它详细信息。</p>

<h2>Ubuntu系统升级策略</h2>

<p><strong>频率</strong></p>

<p>Ubuntu官方一直以来每隔半年就会发布自己的新版本，对于用户来说实质上是一个不小的负担，往往还没有适应现在的版本，新的版本又推送过来，所以我个人的意见是不用追新，只升级两年一次的LTS版本即可。</p>

<p><strong>时机</strong></p>

<p>我们之前还说过Ubuntu某个版本源里的软件版本都会和Ubuntu自己的版本存在对应关系，例如：Ubuntu 10.04上的输入法软件iBus只会更新到1.2版本，如果你想使用最新的1.4版本，要么自己去编译安装，要么设法说服软件作者或者其它爱好者打包更新Ubuntu10.04源里的iBus版本或者找第三方源，相当的不方便。对于一个太早的发行版很多软件作者没有动力和热情再去为其做兼容性开发，测试和更新源的工作。所以当你发现自己手上的发行版源里的软件都过于腐旧，互相之间出现越来越多的兼容性问题的时候，这也是一个提醒你应当对现有系统做一次升级的信号。举我自己的例子，两个月前决定从10.04升级到12.04就是因为10.04下的拼音输入法fcitx和firefox较新版本之间存在冲突，总是导致页面假死。询问fcitx的源打包者又无果：不愿意更新10.04下的fcitx版本解决这个问题，才有了这次升级。</p>

<p><strong>方式</strong></p>

<p>虽然Ubuntu自己也提供了'sudo apt-get dist-upgrade'这样的命令做发行版之间的大升级，但是从一些用户反馈来看效果并不理想，采用这种方式升级的系统总会存在各种问题。因此还是建议读者可以参照本文前面的备份恢复策略进行跨大版本的升级，一般这样的升级不会有太多问题，除非某些软件的差异过大，用户自行适应一段时间即可。另一方面在 Ubuntu Server 上做大版本升级的时候，我又推荐使用'sudo apt-get dist-upgrade'这种方式，其一没有GUI软件的升级会更平滑，其二以我自己的实践：在 Server 端做这样的升级会相当顺利，运行apt命令以后，只用了半小时就完成了Ubuntu版本的升级和全部软件的更新。</p>

<p><strong>未完待续......</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu桌面生存指南 (3) --- 构建Ubuntu系统基础设施]]></title>
    <link href="http://ghosertBlog.github.com/blog/2012/10/30/ubuntu-living-handbook-install/"/>
    <updated>2012-10-30T13:03:00+08:00</updated>
    <id>http://ghosertBlog.github.com/blog/2012/10/30/ubuntu-living-handbook-install</id>
    <content type="html"><![CDATA[<h2>Ubuntu系统的基础设施</h2>

<p>任何一个高可用的操作系统，必须解决以下几个重要的问题：</p>

<ol>
<li>系统易于安装升级</li>
<li>软件丰富，完备</li>
<li>便捷的系统备份与恢复</li>
<li>硬件驱动完善</li>
<li>突破墙的封锁（中国特色问题）</li>
</ol>


<p>这一节中，我们将讨论从头开始搭建一个基础设施完善的 Ubuntu 系统。主要包括基于 Ubuntu 系统的安装，分区方案，显卡驱动安装，翻墙相关的一些技巧和同步软件（Dropbox）等基础性软件的安装方法。在夯实了这些基础之后，我们也为未来的系统备份，恢复做好了准备，提高了系统的图形处理性能，解决了在不同机器，不同系统间的文件同步问题，同时突破墙的封锁，进一步方便我们日常的工作学习，极大提升系统的可用性和灾难恢复能力。</p>

<!--more-->


<h2>从U盘安装系统</h2>

<p><a href="/blog/2012/10/22/ubuntu-living-handbook-experience/">上一篇</a> 博客中我们提到过，虽然 Ubuntu 的发行安装方式众多，我们仍然推荐从硬盘开始安装。另一方面比起光盘，相信很多同学也了解U盘的优势：易于携带，保存，复制。这里不再敷陈，我们就从制作启动U盘说起。</p>

<p><strong>1. 下载 Ubuntu ISO 文件</strong></p>

<p>访问 Ubuntu 的 <a href="http://www.ubuntu.com/download">官方下载</a> 页面，选择相应版本。一般而言它的版本有桌面版，服务器版，32位，64位，LTS，非LTS之分。所谓 LTS（Long Term Support）指的是长时间支持版本，并不是每一个新版本的 Ubuntu 都是 LTS 版本，譬如，最新的 12.10 版本就不是 LTS 版本，12.04 就是 LTS 版本，12.04 之前的 LTS 版本要追溯到2010年4月发布的 10.04，同时主版本号代表发布的年份，次版本号代表发布的月份，例如：12.04表示2012年4月发布。一般来说，推荐下载最近的 LTS 版本会得到更好的官方支援。这里我们推荐安装 12.04 的64位桌面版（命名方式：ubuntu-12.04.1-desktop-amd64.iso），官方支持长达5年之久，基本上已经超过了用户当前硬件的预期使用寿命，也就是说你在换下一台PC之前无需更换操作系统。如果官方站点的下载速度较慢，你也可以搜索国内的一些镜像网站加速下载过程。譬如 <a href="http://mirrors.163.com/ubuntu-releases/precise/">网易镜像</a></p>

<p><strong>2. 从 Windows 制作启动U盘</strong></p>

<p>在 Windows 下访问 <a href="http://www.pendrivelinux.com/universal-usb-installer-easy-as-1-2-3/">Universal USB Installer</a> 的主页，这个Ubuntu官方推荐的绿色小工具就是帮助用户在手头没有 Ubuntu 的情况下，使用 Windows 来制作启动U盘。这个页面不仅包括了工具的下载链接，同时也包含了详细的操作步骤，同学们准备好1G容量以上的U盘和刚才下载到的ISO文件，按部就班操作即可。制作U盘的时候注意相应的选项，按我个人的经验它制作出的启动U盘质量相当高，甚至超越了Ubuntu下自带的工具。</p>

<p><img src="/images/ubuntu_living_handbook/Universal-USB-Installer.png" alt="Universal-USB-Installer" /></p>

<p><strong>3. 从 Ubuntu 制作启动U盘</strong></p>

<p>如果你手头有一台安装完毕的 Ubuntu 系统，你也可以通过启动 Startup Disk Creator 这个系统自带的工具制作启动U盘。注意如果你是跨版本的制作相应的启动盘可能会存在问题，笔者曾经在Ubuntu 10.04下使用这个工具制作基于12.04 ISO的启动盘，结果启动盘无法启动电脑，花了一个晚上才搞清楚原来是跨版本引发的问题，最后切换到 Windows 下的 <a href="http://www.pendrivelinux.com/universal-usb-installer-easy-as-1-2-3/">Universal USB Installer</a> 才解决问题。</p>

<p><img src="/images/ubuntu_living_handbook/startup-disk-creator.png" alt="startup-disk-creator" /></p>

<p><strong>4. Ubuntu 分区推荐方案</strong></p>

<p>在安装之前，我们先分析一下 Ubuntu 桌面系统的分区方案。</p>

<p>要了解分区方案，先从 Linux 系统的目录结构说起。使用 Windows 系统的用户都知道，Windows 系统先有分区的存在，然后在不同的分区下创建文件目录结构。于是我们看到诸如 C:\Windows D:\Downloads 之类目录，也就是说每一个目录首先是存在于某个分区的。Linux 系统则相反，它首先确定有目录的存在，例如：/， /usr， /media/usb，/media/cdrom， /disk 然后才确定这个目录上挂载的是哪个分区（甚至挂载的可能是CDROM， USB等外设以及ISO光盘镜像文件：类似 Windows 下虚拟光驱的作用）。访问某个目录，实质上就相当于访问挂载在这个目录上的分区，外设或者光盘镜像文件。我们在 <a href="/blog/2012/10/22/ubuntu-living-handbook-experience/">上一篇</a> 博客中提到过一个系统存储重要数据的目录： <strong>/home</strong> 目录， 在通常的最佳实践中，可以把这个 home 目录作为一个单独的挂载点，挂载一个独立分区。这样做有几个好处：</p>

<ol>
<li>系统分区如果损坏，幷不影响到 /home 分区所在的数据。这些数据通常非常重要，包括有你常用的软件，重要的文档以及各类软件的配置信息，反过来我们也鼓励把重要的数据存放在 /home 目录下，使得他们保存在系统分区以外的分区，避免因为系统的问题受损。</li>
<li>在重装系统，或者升级系统以后，/home 分区的数据可以得到保留，最大程度的避免了软件安装和重新配置的耗时工作。</li>
<li>在日常备份的工作中可以选择只备份 /home 分区所在的数据，避免做全盘的备份。</li>
</ol>


<p>我自己就曾经因为在两年前安装Ubuntu 10.04的时候只分了一个分区，把 /home 目录下的数据和系统文件存储在了同一个分区下，导致在安装Ubuntu 12.04的时候，在没有第二个分区和第二台电脑用来备份/home目录数据的情况下，忍痛将整个系统连同/home目录里的数据全部格式化，损失惨重，教训深刻。</p>

<p>所以一般来说一个 Ubuntu 的系统在安装之初应该有三个分区，他们分别是挂载于根目录： <strong>/</strong>, home目录： <strong>/home</strong> 的两个分区以及 swap 分区。swap分区是指虚拟内存的交换区，一般设置为实际内存容量的两倍大小即可。</p>

<p>假设你有一台500G硬盘，2G内存的PC，那么比较好的分区分配方案是：根目录所在分区分配50G左右， swap分区分配4G，剩余空间全部留给 /home 所在分区即可。</p>

<p><strong>5. 安装注意事项</strong></p>

<p>在安装之前，记得备份本机重要数据。在电脑上插入启动U盘后，选择从U盘启动计算机：大多数电脑可以在出现启动画面的时候按F12选择启动媒介，此时选择U盘即可。之后一路安装 Ubuntu 会比较顺利，但是以下几个地方仍然需要注意：</p>

<ol>
<li>在 Installation type 界面选择 Something else 选项，这样你才有机会调整，保留现有分区以及分区上的数据，并将多个分区挂载到同一个系统的不同挂载点（上文所述的根目录和home目录）【推荐】。</li>
<li>选择 ext4 文件系统格式作为 Linux 的文件系统格式。</li>
<li>三个分区大小可按上个小节分配，根目录分区大小不必过大，50G至多，如果硬盘本身不大，只分配15G问题也不大。大多的数据应该存放在 /home， 因此 /home 所在分区应该足够大。</li>
<li>Installation type 界面中 Device for boot loader installation 选项列表中记得选择硬盘所在条目一般是：/dev/sda，笔者安装 12.04 时因为不慎选择了 USB 所在媒介：/dev/sdb 导致安装完毕后只有插着USB才能启动系统，悲剧！</li>
</ol>


<p>大致的效果图如下（忽略分区尺寸一项，随意填的）</p>

<p><img src="/images/ubuntu_living_handbook/installation-type.png" alt="installation-type" /></p>

<h2>高速下载软件---关于Ubuntu源</h2>

<p><strong>1. 官方Ubuntu源</strong></p>

<p>安装完系统以后，我们来聊聊软件安装的问题。之前，我们说到通过强大的 <strong>apt-get</strong> 命令从网络上下载，安装软件的方式，而运行这个命令时，系统又是通过查询软件所在的 <strong>Ubuntu源</strong> 来了解从互联网的什么地址去下载软件，那么对于动辄上百兆或者数量繁多的软件来说，从你的 PC 到 <strong>Ubuntu源</strong> 之间的网速就决定了你安装下载软件的速度。一个新安装完毕的系统，默认选择的是美国服务器作为 <strong>Ubuntu源</strong>，因此我们需要选择更快的国内镜像作为系统的源来下载安装软件。具体步骤：</p>

<ul>
<li>Ctrl+Alt+t打开终端，输入: update-manager
<code>
jiawzhang@home-pc:~$ update-manager
</code></li>
<li>点击左下角Setting按钮，进入Ubuntu Software选项卡，点击Download from下拉列表中的Other项。</li>
<li>在弹出的对框中，点击Select Best Server来进行源的测试工作。</li>
</ul>


<p>但实际上，考察一个源是不是足够好，光看速度并不正确，有时一个速度很快的源如果缺少某些软件，仍然会造成困扰。按笔者的经验，在国内可以直接选择http://ubuntu.cn99.com/ubuntu这个源，速度快，源里的软件也相当齐整。选择完源以后，再次打开终端，输入以下命令更新系统现有的软件：
<code>
jiawzhang@home-pc:~$ sudo apt-get update
jiawzhang@home-pc:~$ sudo apt-get upgrade
</code></p>

<p><strong>2. 第三方Ubuntu源</strong></p>

<p>以上我们讲到的都是Ubuntu官方的源或者官方源在国内镜像，除此以外，Ubuntu也允许第三方制作第三方源以扩充软件的数量。但是如果你选择第三方源，官方并未对其中的软件进行过测试，也不保证软件的质量，系统兼容性等问题。反过来说如果你开发的软件进入了官方源，这是一种莫大的荣誉，它首先肯定了你软件的质量，其次也扩大了软件受众的数量，并且经过了官方认证和测试。</p>

<p>假设你现在需要安装 Wine 这个软件------主要用来在 Ubuntu 下运行 Windows 的可执行文件。虽然这是一个合法的软件，但是 Ubuntu 官方没有可能在自己的源中加入一个可运行专利程序的软件，因此你需要自己去加入包含有 Wine 这个软件的第三方源，打开终端，运行：
<code>
jiawzhang@home-pc:~$ sudo add-apt-repository ppa:ubuntu-wine/ppa
jiawzhang@home-pc:~$ sudo apt-get update
jiawzhang@home-pc:~$ sudo apt-get install wine
</code></p>

<p><strong>3. Canonical合作伙伴的源</strong></p>

<p>Ubuntu的母公司Canonical另外还有一些合作伙伴，例如在 Ubuntu 12.04 上，如果你需要安装 skype，可以加入这个合作伙伴的源，然后进行安装。</p>

<p>按照上面的步骤打开update-manager以后，仍旧点击Settings按钮，进入Other Software选项卡选中“Canonical Partners”和“Canonical Partners(Source Code)”加入合作伙伴源，接着运行：
<code>
jiawzhang@home-pc:~$ sudo apt-get update
jiawzhang@home-pc:~$ sudo apt-get install skype
</code></p>

<p>个人建议在系统安装完毕以后按此步骤加入这个源，方便以后的软件安装。</p>

<h2>显卡驱动安装</h2>

<p>默认情况下，Ubuntu在安装完成以后，可以认出绝大多数的硬件，并不需要特别的设置。唯一例外的是，如果你无法开启某些窗口特效，意味着系统自带的驱动无法和你的显卡很好的匹配，这个时候你需要去手工安装显卡驱动。我们以 nvidia 的显卡为例，介绍一下显卡驱动的安装方法：</p>

<p><strong>1. 访问 <a href="http://www.nvidia.com/object/unix.html">nvidia 官网</a> 下载最新的驱动程序</strong></p>

<p>假设下载文件名为：NVIDIA-Linux-x86_64-304.60.run的64位显卡驱动程序</p>

<p><strong>2. 设置下次系统启动后，只运行在终端下，不启动 GUI 系统</strong></p>

<p>就和在Windows下，系统要求你在保护模式下安装某些软件类似，安装显卡驱动的时候，系统也往往要求在完全的终端里，不带任何图形界面的模式下，因此我们需要让系统下次启动的时候进入终端模式，这里我们第一次需要修改系统的配置文件，在使用 Linux 系统的时候，今后我们会无数次的通过修改基于文本的配置文件来设置我们的系统，因此掌握一个好的文本编辑器也至关重要，Linux下标配的文本编辑器是强大的 vi，如果你现在还不熟悉，没关系，可以先使用 gedit，为了保持博客的专业性，我在今后的命令行中只使用 vi，读者自行替换成 gedit 即可。
<code>
sudo vi /etc/default/grub
找到 GRUB_CMDLINE_LINUX_DEFAULT="quiet splash" 这一行，修改为 GRUB_CMDLINE_LINUX_DEFAULT="text"
sudo update-grub
sudo shutdown -r 0 #重启电脑
</code></p>

<p><strong>3. 进入重启后的终端，运行</strong></p>

<p><code>
cd ~/Downloads/
chmod u+x NVIDIA-Linux-x86_64-304.60.run # u代表当前用户，x代表可执行权限，u+x即表示赋予脚本当前用户的可执行权限
sh NVIDIA-Linux-x86_64-304.60.run # 执行脚本
</code>
按提示完成安装以后，仍旧将系统改回下次重启时进入用户图形界面而非终端模式：
<code>
sudo vi /etc/default/grub
找到 GRUB_CMDLINE_LINUX_DEFAULT="text" 这一行，修改为 GRUB_CMDLINE_LINUX_DEFAULT="quiet splash"
sudo update-grub
sudo shutdown -r 0 #重启电脑
</code></p>

<h2>Ubuntu视窗特效及思考</h2>

<p>如果一切顺利和系统匹配的显卡驱动已经安装完成了，如果想开启一些视窗特效可以下载这个软件：
<code>
sudo apt-get install compizconfig-settings-manager
ccsm # 运行compizconfig-settings-manager 设置特效
</code>
在Category->Effects里勾选上Wobbly Windows选项，还算一个很好玩的特效，在你拖动，最大化，恢复任何程序窗体的时候，会有夸张的扭动效果，几乎每一个看到我桌面的人都会赞叹一下。不过窗体特效毕竟是华而不实的玩意，不必花费过多时间在这个上面，在许多 Ubuntu 论坛里会有长篇累牍的文章介绍如何装扮炫目的动画效果，我只想反问：还记得我们使用 Linux 系统的初衷是什么？是高效的使用开发者系统，如果迷恋炫目的视觉效果，花费大量的时间精力去配置，一来有违初衷，二来也容易破坏系统的稳定性，历来一个操作系统的软肋就是GUI，开发最复杂，也最容易引发程序甚至系统崩溃，进而炫目的视觉特效实际上会导致低效的操作。例如渐变式的关闭或者开启一个窗口，看上去很炫，实质上为了完成这个特效，窗口延缓了开启或者关闭的时间，一两次延缓不会造成什么损失，考虑到我们会在这个系统中生存几十年，很可能有几万几十万次的延缓累加--那简直就是浪费生命了。撇开这个例子不谈，使用开发者系统追求高效的实质就是改进每一个微操作，通过改进哪怕只能节省几百毫秒的操作，只要这些操作会被无数次的重复，然后累积这些节省带来的效果，经年累月以后，都是惊人的节约。假设一个500人的公司，每个人每天因此可以受益5分钟的时间，那么一年下来：500 * 5 * 251（工作日）/ 60（分钟）/ 8 (一天工作小时) = 1307 天/人，相当于这500人在一年里节约出了5个人年的时间。</p>

<p>Ubuntu 12.04 在切换程序这个环节因为采用特效其实也出了问题，有一些倒退的味道。大家可以试试 "Alt + Tab" 这个常用的程序切换的快捷键。它默认的行为是先对同一类的窗口进行分组，然后如果用户的切换动作在某一组窗口上略作停顿，系统才会展开这一组的窗口，继而在这一组窗口中的每一个窗口间进行切换。表面上看分组的形式减少了我们之前谈到的 <strong>视觉迷失</strong> 带来的困扰，实质上又增加了每个切换间的停顿时间，破坏了用户原本流畅操作的体验，况且，如上所述，累积停顿带来的后果也是不可承受的，而这里 <strong>视觉迷失</strong> 的问题其实又可以通过系统自带的 <strong>虚拟桌面</strong> 来解决，也算不上大问题。因此我个人推荐按以下方法舍弃这种切换特效：</p>

<p>打开终端输入：ccsm 启动 CompizConfig Settings Manager, 进入 Windows Management，选择 Static Application Switcher 可能会报一些快捷键冲突的警告，强制切换即可。</p>

<h2>同步软件及 Dropbox 的安装</h2>

<p>本来一个同步软件不需要提前到这个章节来讲，但是同步软件在我们这个时代越来越重要，可以提升到基础设施的高度来首先考虑。Ubuntu 的 apt-get 命令为我们解决了从云端下载软件的问题，自此我们不需要关心软件在哪里，只需要告诉计算机我们需要什么软件，并且即使在本机崩溃的情况下，仍然可以从云端用同样的命令下载软件。在解决了软件的问题以后，类似 Dropbox 的同步软件则为我们解决了私人文档的问题。无论你的计算机是否崩溃，也无论你在那一台计算机前，公司的，家里的，甚至手机，平板上，只要你能够接入互联网，你就可以访问自己的私人文档。所以个人推荐把重要的文档存入同步软件方便访问和恢复。当然需要频繁修改和多人合作完成的文本文件就不在此列了，专业的 Source Control System 例如 <strong>git</strong> 命令提供了更好，更强大也更专业的功能，我们以后再谈。也有同学会说为什么不使用系统自带的 Ubuntu One 这个同步软件？在一两年前 Ubuntu One 的平台支持仅限于 Ubuntu 系统本身，这就是一个软肋，同步软件的软件性质本身就要求跨平台，全平台的支持，包括： Ubuntu，Windows，Mac，Android， iOS 因为我们不知道自己今后可能在哪个平台下需要访问某个重要的文档。在书写本文之时，再次访问 Ubuntu One 的官网，发现已经全平台支持同步了，因为没有使用经验，不敢妄论，Dropbox 笔者使用多年，对中国用户来说，除了网速和GFW的问题，其它各方面均体验良好。先介绍一下 Dropbox 这个软件的安装，之所以需要单独讲安装，还是因为 GFW 的缘故，也顺便讲解几个小命令。首先</p>

<p><strong>1. 访问 <a href="https://www.dropbox.com/install">Dropbox下载</a> 页面，下载 Ubuntu 版本对应的 .deb 文件</strong></p>

<p><strong>2. 开启终端，输入安装deb包的命令：</strong>
<code>
sudo dpkg -i dropbox_1.4.0_amd64.deb
</code>
dpkg 是一个比 apt-get 更低阶的安装命令，apt-get 命令下载的就是 .deb 文件，然后调用 dpkg -i 进行安装， 以上命令只是安装了 Dropbox 的 GUI 壳，运行以后会继续下载 Dropbox daemon 程序，由于 GFW 的阻挠，这个过程无法进行。读者选择退出 Dropbox 即可。</p>

<p><strong>3. 手动下载 Dropbox daemon</strong></p>

<p>32-bit:
<code>
cd ~ &amp;&amp; wget -O - "https://www.dropbox.com/download?plat=lnx.x86" | tar xzf -
</code>
64-bit:
<code>
cd ~ &amp;&amp; wget -O - "https://www.dropbox.com/download?plat=lnx.x86_64" | tar xzf -
</code></p>

<p>解释一下：cd ~ 就是进入 home 目录， &amp;&amp; 是指在 cd ~ 成功以后，继续下一个 wget 的命令。 wget 会去后面 https 起首的地址下载 Dropbox daemon 的压缩包，之后再通过 | 把压缩包传递给 tar xzf - 这个命令进行解压的操作。如果读者暂时无法理解，也没关系，直接把上述命令复制粘帖进终端即可。</p>

<p><strong>4. 再次启动 dropbox</strong></p>

<p>打开终端，输入：
<code>
dropbox start
</code>
至此，安装完毕，按笔者目前的网络环境，在安装以后，最新的 Dropbox 版本可以正常使用，无需修改任何配置，所有以 https 起首的 dropbox 网址也可以在浏览器中没有限制的访问。所以只要按上述步骤解决安装的问题就可以了。笔者没有测试所有网络环境下的条件，如果还有问题，可以在博客评论中描述状况，本人负责做力所能及的解答。</p>

<p><strong>如果对 Dropbox 感兴趣，可以通过本人帐号的推广链接创建帐号：<a href="http://db.tt/oNnbpla">http://db.tt/oNnbpla</a> 你我各自增加 500M 的空间大小，惠己利人。</strong></p>

<h2>同步软件使用经验</h2>

<p>虽然笔者在此处推荐 Dropbox, 读者也可以自行选择其他同步软件，下面继续分享一下我自己在 Ubuntu 上使用同步软件的体会。</p>

<p><strong>1. 在云端保存基于单一文本的Linux知识</strong></p>

<p>我们前面提到为了提升使用计算机的效率， Linux 系统是需要花费脑力学习，研究的系统，每一个用户亲身获得的技巧，知识，例如：一种配置方法，一个命令用法，往往这些东西都很零碎且不易记住。俗话说：好记性不如烂笔头，所以我们可以使用文本去记录这些知识片段，记录的时候不要求完整全面，反而应该描述简洁，步骤清晰，提供有价值的参考。这样一旦遇到问题就可以在经过摸索以后把解决的方案写入这个文本，以后遇到类似的问题，即便忘记了命令，步骤，再次搜索这个文本即可。<strong>基于单一文本的云端保存</strong>优势明显，它可以在任意计算机上被任意程序阅读，修改和搜索，<strong>搜索优于导航</strong>的理念使得我们也不再组织各种文件目录去保存这些知识：在增加知识的时候，你无需烦恼如何整理分类某一个技巧，在查询知识点的时候，也无需到不同的目录去翻阅，只在单一文件中做搜索工作。增加文件或者树形结构的目录在某些情况下只不过是增加了<strong>导航</strong>的成本，而如果我们化繁致简，那么我们花费的记忆成本就只有一个文件路径而已，其它的事情，全都教给<strong>搜索</strong>去打理。不仅于此，做任何事的时候，谨慎的增加事物的复杂度以保持简单的特性才能避免混乱的局面，即所谓的 KISS 原则，Keep it simple, stupid!</p>

<p><strong>2. 在云端保存一个软件安装的脚本</strong></p>

<p>apt-get 作为命令行安装软件的一大优势就在于可脚本化幷反复运行。每次运行 apt-get 下载安装一个软件以后，都把这一句 apt-get 命令保存在脚本文件里，这样，一旦发生系统崩溃的情况，只需要在全新安装后的系统上重新运行这个脚本，就可以恢复我们系统上曾经安装的软件。更进一步，如果我们有编译安装软件的步骤或者定制系统的工作都可以用命令行的形式固化在这个脚本中，用以今后恢复系统。实践上，我自己将这个脚本的内容和上述第1点的知识文档合二为一，所有的知识文本以注释的形式存在于这个系统恢复脚本中。因此这个脚本既可以用来恢复系统，也可以用来记录，查询知识点，当然为了方便使用，这个脚本也需要时时刻刻的更新和维护以保证最大的正确性和可用性。以下是摘自我个人脚本中的片段：
ubuntu_install_guide.sh
```</p>

<h1>!/bin/sh</h1>

<p>cd ~
sudo apt-get update # This is very important step to update system first.</p>

<h1>install gcc/g++ first</h1>

<p>sudo apt-get install gcc -y # if there is no gcc, do this first.
sudo apt-get install g++ -y # if there is no g++, do this first.</p>

<h1>install gvim</h1>

<p>sudo apt-get install vim-gnome -y
......
......
......</p>

<h1>XXX Tips:</h1>

<h1>Visit http://www.google.com/ncr to make sure no country redirection, this will resolve some issues on resetting google-search-result(by GFW or ISP).</h1>

<h1>XXX Tips:</h1>

<h1>Start gvim from terminal and get global menu in Ubuntu 12.04: gvim -f filename</h1>

<p>......
......
......
```</p>

<p><strong>3. 在云端备份 home 目录下重要的配置文件</strong></p>

<p>在重新恢复一个系统的时候，除了软件的恢复可以通过上述云端的脚本，另外还有一个重要的东西就是软件的配置文件。由于 Linux 软件的高可定制化，许多高效率的用户之所以可以灵活驾驭 Linux 系统，实际上是花费了大量的时间在适应软件，或者调整软件的配置来适应自己，达到人机合一的境界，而一旦切换到别人的环境上，由于人与人之间习惯的不同导致配置的不同，效率立刻就下降几个数量级，甚至根本在别人的环境里无法工作。因此丢失配置文件对于高效用户来说，就相当于丢失效率，必须从头开始花费心力去配置软件，损失大量的时间，而与用户相关的配置文件一般都会存放在 home 目录，因此及时备份这些数据到云端就显得尤为重要了。一来可以在安装完软件以后恢复这些配置文件，二来我们也可以通过云端在不同计算机上共享这些配置，无需在多个计算机上反复进行相同的配置工作。一般来说，这些文件都以 <strong>.</strong> 起首的隐藏文件形式存在，可以使用以下命令查看
<code>
ls -al ~
</code>
例如：.vim .vimrc 保存了 gvim 的配置信息， .mozilla 保存了 firefox 的配置信息，等等。</p>

<p><strong>4. 在云端存储其它重要的文档，电子书，音乐，图片等等</strong></p>

<p>这个是同步软件的基本用途，不再敷陈。</p>

<p>综上所述，现在我们的云端帐号里存储了所有安装软件的命令，所有软件的配置文件以及我们记录下的所有Linux的使用经验，技巧，知识。有了这些东西，即使面对一台全新的计算机，只要首先保证云端的数据都传回本地，就不难很快地再次把它恢复成自己最顺手的系统。</p>

<h2>没有墙的 Ubuntu</h2>

<p>由于GFW的存在，无法自由的接收和发送讯息，这是 Ubuntu 基础架构必须面对的另一个问题，我们就此讨论一种基本的翻墙方法。假设我们的计算机 A 需要访问计算机 B，然而由于墙的阻隔无法达成，因此我们需要首先找到 计算机 C，并且满足A 和 C， C 和 B 之间互相可访问，这样，借助计算机 C 作为代理，就可以实现 A <-> C <-> B 的 A B 之间可访问。这就是我们翻墙方法的基本原理。</p>

<p>假定我们找到了这样一台代理服务器 C（可以通过淘宝购买？），这里又有两种状况需要考虑：</p>

<ol>
<li>通常成熟的带 GUI 的软件，譬如 Firefox，IMs 软件等等，都会在设置中包含代理服务器选项，你只需要填入代理服务器的地址即可。</li>
<li>基于<strong>命令优于图形化界面</strong>，我们又有许多命令行软件例如：wget，git，w3m，apt-get 需要连接互联网才能运行，一旦目标地址有墙的阻隔，又没有办法像 GUI 软件那样设置代理服务器那就成问题了，好在 Linux 早就为我们解决了这个问题，打开终端，输入：
<code>
sudo apt-get install proxychains -y
sudo vi /etc/proxychains.conf
注释掉文件中最后一行：socks4 127.0.0.1 9050
幷在文件最后追加一行：socks5 proxy_ip_address port
</code>
通过安装 proxychains 这个软件，同时我们在它的配置文件 /etc/proxychains.conf 中加入了代理服务器的 ip 地址和端口号，这样我们就可以要求任意被墙阻断的命令行软件通过代理服务器连接互联网了，使用方法也很简单，假设我们需要下载 facebook 的主页，就可以运行：
<code>
proxychains wget http://www.facebook.com
</code>
即在任何命令行前首先加注 proxychains 这个命令。</li>
</ol>


<p><strong>设置本地计算机为代理服务器</strong></p>

<p>假设目前我们没有代理服务器 C，但是另外有一台装有 ssh server的国外主机 D，这个时候我们可以在本地计算机和国外主机 D 之间建立 ssh channel，然后通过这个 channel 把本机设置为代理服务器，所有通过本机代理的请求都会被再次转发到国外主机 D，再经由 D 访问最终的目标地址，最后再把结果回传给本地程序。具体步骤，打开终端输入：
<code>
ssh username@machine_d_ip_address -D 127.0.0.1:7070 # 建立 ssh channel，并且不要关闭这个终端或者退出 ssh
</code>
此时本地 127.0.0.1:7070 这个地址端口已经具备了类似代理服务器 C 相同的作用，你只需要在任意 GUI 程序的代理服务器选项上填入 127.0.0.1:7070，或者在上述 /etc/proxychains.conf 文件最后追加一行
<code>
socks5 127.0.0.1 7070
</code>
即可让 GUI 或者命令行程序通过代理服务器连接互联网。</p>

<p><strong>未完待续......</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu桌面生存指南 (2) --- Ubuntu桌面体验简介]]></title>
    <link href="http://ghosertBlog.github.com/blog/2012/10/22/ubuntu-living-handbook-experience/"/>
    <updated>2012-10-22T09:06:00+08:00</updated>
    <id>http://ghosertBlog.github.com/blog/2012/10/22/ubuntu-living-handbook-experience</id>
    <content type="html"><![CDATA[<h2>选择 Ubuntu</h2>

<p>对于准备迁徙到 Linux 的用户来说，另一个头疼的问题就是选择发行版。所谓发行版是指在同一个 Linux Kernal 上由不同厂商，社区定制包装了不同桌面管理系统和附带了常用软件的 Linux 发行版本，通俗来说就是可以交付给用户安装的 Linux 系统。常见的发行版有 Ubuntu, Mint，RedHat， Fedora 等等，总数不下几百种。面对数量庞大的发行版，新人总是很难做出选择。好在每个发行版本都比较有针对性，有些是针对桌面应用，有些是针对服务器系统，还有一些比较适合初级用户，或者资深极客，大致了解各自的特性以及用户自己的需求也不难做出选择，另外实际上每种发行版之间的区别幷没有大到完全对立的地步，即便随便选择一种用起来上手，大多数的知识还是可以延续和继承在另一种发行版上的。只要不是三天两头换装各种发行版，也不算浪费时间和精力。</p>

<p><img src="/images/ubuntu_living_handbook/desktop.png" alt="desktop" /></p>

<!--more-->


<p>选择 Ubuntu 的理由：</p>

<p><strong>1. 简单，易用，美观，默认软件齐全，适合入门</strong></p>

<p>Ubuntu 在发行之初就以打造一个适合上手，容易入门的 Linux 系统而著称，吸引了大量来自 Windows 的用户。它的发行方式众多，包括 CD / DVD / U盘 等传播方式，用户可以自行下载 ISO 文件刻盘或者制作启动U盘，甚至可以免费向 Ubuntu 的母公司 Canonical 索取邮寄光盘。它的体验安装方式也很丰富，包括:</p>

<p><strong>a) 试用体验</strong>：无论用户的电脑是什么系统，都可以在启动的时候选择从光盘或者U盘启动 Ubuntu 进行试用，不破坏原有数据。再次从硬盘启动后仍旧进入用户的原有系统，很方便那些想尝鲜的用户。很多时候，在原有系统无法启动的情况下，甚至可以利用 Ubuntu 的这个特性来进行硬盘修复，挽救数据的工作。</p>

<p><strong>b) Wubi安装</strong>： 直接将 Ubuntu 作为 Windows 系统的一个应用程序安装，再次启动后出现双启动菜单，避免了破坏原有 Windows 分区的风险，如果对 Ubuntu 不满意，可以直接在 Windows 中像删除任意一个应用软件那样删除 Ubuntu，完全没有损害系统和数据的担心。如果使用一段时间以后决定将 Wubi 系统转移到物理分区也相当简单，虽然没有官方的方法，网络上有现成的脚本可以在几分钟内完成这个工作。</p>

<p><strong>c) 虚拟机安装</strong>：这种方式则允许你在启动 Windows 的同时，试用虚拟机里的 Ubuntu 系统。暂时无法离开 Windows 环境生存的用户可以通过这种方式进行过度。</p>

<p><strong>d) 硬盘安装</strong>：得益于良好的硬件兼容性测试和完备的驱动兼容，安装 Ubuntu 系统甚至比安装 Windows 的过程更流畅和简单，几次点击和设置以后就可以顺利的完成。天然先进的 Linux 内核架构也使得启动过程异常的迅速，几秒之内完成开机。硬盘安装使得操作系统在本机可以获得最高的运行效率，充分发挥硬件机能，也迫使用户在心理和生理上彻底隔绝对原有系统的依赖，更有利于提高自己在 Ubuntu 系统上的生存能力。在物理分区上安装 Ubuntu 是普罗大众彻底告别专利世界，走向自由世界，完成自我救赎的重要一步，笔者在这里呼吁更多的读者选择这种安装方式，开启心智，提升生产力。</p>

<p>综上所述，Ubuntu 在降低 Linux 的学习曲线上做了大量的工作，也因此一度成为最流行的 Linux 发行版。</p>

<p><strong>2. 先进方便的软件包管理 apt-get</strong></p>

<p>在 Linux 下安装软件有两种方式：1. 从源代码开始编译安装 2. 选择发行版自带的软件包管理系统。前者需要一定的开发知识，了解一些编译器，makefile的基本工作原理，如果安装过程中出现问题，要有一定解决问题的能力，能够根据错误信息做相应的调整，对于新手来说有不小的难度。后者则是由厂商直接提供经过测试的，和当前系统匹配的二进制软件。官方和第三方厂商都会提供相应的软件源，只要连接互联网，你就可以通过命令的方式下载需要的软件，例如在终端运行：
<code>
sudo apt-get install firefox
</code>
就下载了火狐浏览器，如果连接国外的网速比较慢，还可以通过选择国内的镜像网站加速下载。有人会说敲击命令下载软件有多麻烦？那么参见上一篇 <strong><a href="/blog/2012/10/14/ubuntu-living-handbook/">选择Linux</a></strong>。一般来说，官方源里的软件很少有兼容性问题，因为他们都是经过测试的。如果对某个软件不满意你只需要：
<code>
sudo apt-get purge firefox
</code>
经过一段时间以后，系统还会定期提示哪些软件有新版本，你同样只需要运行一个命令完成所有软件的升级：
<code>
sudo apt-get upgrade
</code>
回想 Windows 系统，你需要在互联网上满世界找下载链接，还可能携带病毒，相当不方便，反倒是360软件管家提供了类似的功能。</p>

<p>大多数的发行版都有自己的软件包管理器，例如 redhat 系列的 rpm， Debian/Ubuntu 系列的 deb，哪个管理器可以更方便的使用，更少存在安装卸载问题，更好的理清楚软件之间的依赖关系都是我们选择发行版的重要依据， Ubuntu在这方面天然强大。</p>

<p><strong>3. 强大的文档，社区支持</strong></p>

<p>使用开源软件的另一个问题在于虽然用户有免费使用系统，修改系统，甚至再发行的权利，但是毕竟没有为系统支付过任何费用，因此除非你主动付费否则无法在出现状况的时候要求厂商提供技术支持。对于学习型人才不算什么太大的问题，对于迁徙到这个系统的新人就又束手无策了。正版的 Windows 用户应该是享有这样的权利，Mac 电脑同样可以通过苹果店一对一的专家技术服务解决问题或者购买相关技术支持服务。如果这个时候没有一个强大而且团结的社区组织，一群热心解决问题的技术专家，新人仍然无法生存在这个系统中。好在作为最流行的 Linux 发行版，Ubuntu 在这方面依然很强大。大多数的问题可以通过 <strong><a href="http://www.ubuntu.com.cn/">Ubuntu官方</a></strong> 和 <strong><a href="http://forum.ubuntu.org.cn/">Ubuntu中文社区</a></strong> 解决。</p>

<h2>生存下来</h2>

<p>从一个世界进入到另一个世界后的第一要务就是生存下去，许多人因为无法适应和理解新世界的生存法则，选择了退回到旧世界。但是在此之前，我们鼓励进入新世界的用户扔掉旧有的世界观，用开放包容和探索的态度去适应新世界，用尽可能短的时间生存下来，适应这个世界，改造这个世界。</p>

<p><strong> 首先看看新世界为我们提供了什么？</strong></p>

<p><strong>1. gnome-terminal</strong></p>

<p>我们在前面说过 Linux 哲学中最重要的一条就是：<strong>命令优于导航</strong>，因此一个好用的终端系统尤为重要，终端系统是用户输入命令行，查看输出结果的媒介，一个合格的 Linux 使用者会花费至少 20% 的时间在终端中，如果你是一个开发者，这个比例会更高。</p>

<p><img src="/images/ubuntu_living_handbook/gnome-terminal.png" alt="gnome-terminal" /></p>

<p><strong>2. 火狐浏览器</strong></p>

<p>浏览器的重要性在互联网时代不言而喻，由于 Google Chrome 的强力竞争，火狐浏览器市场占有率最近有所减缓，但是笔者依然是坚定的用户，火狐浏览器的插件生态链时至今日仍然是最强大的，我会在后面的博客系列中做单独介绍。很多用户幷不觉得插件有多重要，坚持 Chrome 的渲染速度秒杀一切，这个观念其实很有问题，硬件机能发展到现在，在同等条件下软件优化带来的效果提升非常有限，反而是人类操作手法的差别才是成为速度快慢的关键，一次缓慢的点击，或者在海量信息前的视觉迷失往往拖累了使用计算机的效率，成为瓶颈，改善操作手法，训练我们自己才是提高速度，提高效率的关键。好的插件就是为了这个目的而存在的。</p>

<p><img src="/images/ubuntu_living_handbook/firefox.png" alt="firefox" /></p>

<p><strong>3. LibreOffice</strong></p>

<p>LibreOffice 源自于著名的 OpenOffice 办公软件，用以替代 Windows 下的 MS Office。我自己虽然并不常用（本人是坚定的文本拥护者，见 <a href="/blog/2012/04/20/geeks-blog/">极客的博客</a> 一文）但是针对 Office 用户仍然值得推荐。Libre Wirter， Libre Calc， Libre Impress 分别对应 MS Word， MS Excel，MS PowerPoint。</p>

<p><img src="/images/ubuntu_living_handbook/impress.png" alt="impress" /></p>

<p><strong>4. iBus 输入法架构</strong></p>

<p>和 Ubuntu 本尊最匹配，最兼容的输入法架构，可以无限扩展各类输入法。笔者目前使用的是系统自带的 iBus-Pinyin，并对词库做了扩展，今后做具体介绍。其它的输入法例如 fcitx 或多或少有一些兼容问题。</p>

<p><strong>5. Rhythmbox 音乐播放器</strong></p>

<p>作为音乐播放器没有皮肤，没有华丽丽的桌面歌词功能，提供本地音乐，网络电台，在线播客等功能，中规中矩，简单实用。</p>

<p><img src="/images/ubuntu_living_handbook/rhythmbox.png" alt="rhythmbox" /></p>

<p><strong>6. Totem Movie Player</strong></p>

<p>系统自带的视频播放软件，由于许多视频解压缩算法首先是在 Linux 平台发明的，所以在视频格式的兼容性问题上，Linux 平台反而很少出现没有办法播放视频的状况，除非是微软的私有格式。</p>

<p><img src="/images/ubuntu_living_handbook/totem_movie_player.png" alt="totem_movie_player" /></p>

<p><strong>7. Ubuntu 软件中心</strong></p>

<p>统一管理安装卸载，软件下载的软件中心，任何对软件的操作都可以在这里进行。笔者实际很少用到，大多数时候还是利用命令 <strong>apt-get</strong> 进行查询，安装，卸载工作。为什么使用命令，仍然参见<strong> <a href="/blog/2012/10/14/ubuntu-living-handbook/">选择Linux</a> </strong>一文</p>

<p><img src="/images/ubuntu_living_handbook/software_center.png" alt="software_center" /></p>

<p>至此，系统默认自带的软件已经为我们提供了终端，浏览器，办公套件，输入法，音乐，视频播放和统一的软件中心，其它的必备软件不再一一列举，基本上用户总是可以找到和 Windows 相对应的软件。从普罗大众的角度来说，即使把这个状态的 Ubuntu 当作 Windows 来使用，一样可以胜任等价的工作，并且没有花费一分钱的专利费用。更由于对病毒木马的天然免疫，无需安装价格不菲的杀毒软件和声誉不佳的360系列软件。</p>

<p><strong>Ubuntu桌面的悬案：迅雷，网银，IMs，游戏，行业软件</strong></p>

<p>自由新世界并不是完美世界。普罗大众在迁徙过程中集中抱怨的稀缺软件有：迅雷，网银，国内流行的 IMs（MSN，QQ），游戏，行业领域的特殊商业软件。道理上讲，这个算不上 Ubuntu 的问题，商业公司在利益驱动下，对于非主流的操作系统总是采取选择性忽略，疏于开发 Linux 平台的兼容版本。一些 Linux 极端主义者对此表示：不提供 Linux 版本的软件都是没有用的软件。笔者什么都不表示，默默的装上这个软件:</p>

<p><code>
sudo apt-get install virtualbox
sudo apt-get install virtualbox-guest-additions
sudo apt-get install virtualbox-guest-additions-iso
</code></p>

<p><img src="/images/ubuntu_living_handbook/virtualbox.png" alt="virtualbox" /></p>

<p>也有同学喜欢用 Wine 的方式来运行 Windows 下的软件，我的意见是：对于大多数软件运行在虚拟机里是最省力的做法，Wine 实在是考验人品的利器，除非万不得已，不要轻易使用，笔者只有一个 PDF 软件使用了 Wine 这种方式，以后再做具体介绍。其它譬如：迅雷，MSN，QQ，行业软件，部分游戏都可以在虚拟机里运行。关于网银，支付宝有直接支持火狐浏览器，大多数带有U盘做电子证书的网上银行譬如招行也都可以毫无压力的运行在虚拟机里。但是需要为了使 Virtualbox 辨认出物理 USB 外设做如下设置：</p>

<p>对于 Ubuntu 12.04 系统安装（10.04系统可以省略）：
<code>
sudo apt-get install gnome-system-tools
</code>
在 Ubuntu 已安装的应用程序中找到：Users And Groups，点击 Manage Groups，双击“vboxusers”后选择当前用户名，点击确认。重启计算机后运行 Virtualbox 启动 Windows，在底部隐藏菜单内选择“Devices->USB Devices->对应的 USB 外设” 即可。</p>

<h2>高质量的生存，从桌面图标说起</h2>

<p>写到这里，我们已经具备了基本的生存条件，千万不要高兴太早，失去前进的动力，因为我们至多还是“使用 Linux 的 Windows 用户”，我们仍然基于鼠标，图形化界面和导航这些低效的外设，理念来使用高效的开发者系统。这一小节笔者提纲挈领的分享一下如何高质量地生存在开发者系统。在今后的博文系列中则会结合具体的软件分享更多的高效使用开发者系统的经验。</p>

<p><strong>没有图标的桌面 --- 做正确的事情，幷把它做到极致</strong></p>

<p>从这篇博客切换到你当前的桌面，数一数桌面上有多少个可以点击的图标。十个？二十个？或者更多？我们往往把常见的事情认为理所当然，没有人去质疑这个事情，甚至我自己在几年前也把铺满图标的桌面作为一种充实的象征，普罗大众系统也很鼓励创建桌面图标，几乎每次安装软件都会有新图标在桌面上（Ubuntu系统不会），除此以外，我们也常常按直觉把重要的东西放在桌面上。从短视的角度来看，确实很方便，但是日积月累之后，谁都会感觉在一堆红红绿绿的图标里找到自己想要的东西有多困难。造成这类<strong>视觉迷失</strong>痛苦体验的根源仍然是贪图方便，依赖视觉导航，没有花费脑力。</p>

<p>一来我们是被普罗大众系统的设计误导了，二来我们缺少真正的思考去理解如何处理人和计算机的关系，从而达成高效的目标。</p>

<p>运用心智并且乐于花费脑力的人会怎么解决这个问题？ 参考我们之前的理念：<strong>“命令优于导航”</strong>，与其在一堆桌面图标里找自己需要的东西，为什么不直接告诉计算机自己要什么呢？在 Ubuntu 里通过快捷键：ctrl+alt+T开启终端，然后输入自己想要打开的软件比如：
<code>
jiawzhang@company-ws:~$ firefox
</code>
键入firefox，然后浏览器就打开了。我们付出了一些记忆软件名称和敲击键盘的成本，却避免了视觉搜索和导航操作的低效率。这是一笔合算的买卖。不止于此，为了最小化这个成本，可以尝试只键入软件名的前几个字母，然后按Tab键，比如：
<code>
jiawzhang@company-ws:~$ fire[TAB]
</code>
终端系统会自动补全 firefox，所以理论上我们只需要零碎的记忆住常用软件的前几个字母，无需任何图标，只需要一个终端，你就可以启动任何程序。有人会抱怨自己的记忆力不佳，没办法记住系统里这么多软件名，但实际上开发者系统比你自己更了解这样一个事实：大脑是一个用进废退的器官，你越多敲击常用的软件名，你就越没有可能忘记它们，至于不常用的软件，用的时候再找也好过每次要在一堆图标里找，还有一些软件，这辈子你也不会再用，更没必要去记住它们。</p>

<p>有些朋友反映在终端启动某些程序后会占用终端不释放，直至关闭那个程序，例如：
<code>
jiawzhang@company-ws:~$ gedit
</code>
启动 gedit 后，直至关闭 gedit，否则用户无法继续使用启动gedit的这个终端。为了解决这个问题，可以按Ctrl+Alt+t打开终端，在当前 home 目录（缩写为 <strong>~</strong>）下创建一个文本文件命名为 x，内容为：
```</p>

<h1>!/bin/sh</h1>

<p>"$@" 1>/dev/null 2>&amp;1 &amp;
<code>
这个脚本的大意是运行软件的时候，不输出任何标准信息和错误信息，并且在后台运行，这样就可以避免占据终端的行为。接着执行：
</code>
jiawzhang@comapny-ws:~$ mkdir ~/bin   # 在home目录下创建bin目录
jiawzhang@comapny-ws:~$ chmod u+x ~/x # 赋予x脚本用户级别的可执行权限
jiawzhang@comapny-ws:~$ mv ~/x ~/bin  # 将x脚本移动到bin目录</p>

<h1>重新登录或者重启机器使得这些变更生效</h1>

<p><code>
~/bin 目录是一个特殊的目录，任何放置在其中的脚本程序，都可以在终端中被直接识别，运行，因此今后只需要在被启动的程序名前加 x 如：
</code>
jiawzhang@company-ws:~$ x gedit
```
终端就不再会被占据。</p>

<p>如果你使用带有 Unity 系统的 Ubuntu 版本，那么就更简单了，按一下标准键盘上的Windows键，出现 Dash home 搜索框，直接键入软件名，按回车启动即可，这个过程中不需要任何鼠标操作的介入。</p>

<p>和桌面上的程序图标类似，重要的文档，文件夹也是如此，随手用鼠标往桌面上一扔，不会有什么好结果，所以 Linux 系统有一个 home 目录的概念，每次你打开终端，当前目录总是你的 home 目录，你可以把重要的文档寄存在这里的某个子目录下，这样只需要打开终端，你就可以访问这些文档。Linux 还为 home 目录单独分配了一个叫做 ～ 的别名，无论你当前在哪个目录只需要：
<code>
jiawzhang@home-pc:~/Dropbox/backup/tools/YaHei$ cd ~
</code>
就可以返回 home 目录，一般来说，和你个人账户相关的所有重要软件，文档，配置都会寄存在这里，它太重要了，以至于你还应该把它挂载在单独的分区中，我们下节再做更详细的讨论。</p>

<p>现在，你可以从终端中启动任何程序，访问任何重要的文档，桌面上的图标已经没有任何意义，不妨把他们全部删除。如果参照本文最开始的截图，你还可以看到 Ubuntu Unity 风格的桌面，即在桌面左侧自上而下有一个工具条，上面罗列着常用的应用程序，它们的存在和桌面图标一样没有必要，况且还占用了宝贵的屏幕空间，可以在 System Settings -> Appearance -> Behavior 中设置为自动隐藏。</p>

<p>最后，我们得到了这样一个干净，整洁，终端常驻的桌面，它极致简约而又极致强大，在那个黝黑背景的终端上，闪烁着浅灰色的光标，安静而神秘，我们的先辈就是从这里开始创造了无数的奇迹，而如今这里又是充满了无限可能的地方，等待我们去发现。</p>

<p>未完待续...</p>

<p><img src="/images/ubuntu_living_handbook/desktop_noicon.png" alt="desktop_noicon" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu桌面生存指南 (1) --- 选择 Linux]]></title>
    <link href="http://ghosertBlog.github.com/blog/2012/10/14/ubuntu-living-handbook/"/>
    <updated>2012-10-14T22:49:00+08:00</updated>
    <id>http://ghosertBlog.github.com/blog/2012/10/14/ubuntu-living-handbook</id>
    <content type="html"><![CDATA[<h2>缘起</h2>

<p>我大概是从2010年4月份开始把自己的桌面开发环境从 Windows XP 迁移到 Ubuntu 10.04 的，说起来也已经有两年半的 Ubuntu 使用经验。那次迁移的原因大致是因为某个阶段特别迷恋如何高效的操作电脑，当时把 Windows 整的很伏贴，但是说到高效的使用电脑，不可能对 Linux 系统视而不见。其次就是瞥到一个同事在捣鼓 Ubuntu， 加上毕竟 Windows 环境生存了十几年时间，再多的新鲜感也用尽了，当时很想试试在 Linux 下是不是可以完成在 Windows 下等价的工作。当然，两年半以后，很多结论都是不言自明的。所以《Ubuntu桌面生存指南》是我在两年半时间里，对 Ubuntu 这个发行版的使用心得，我会涉及必要的基础知识，帮助诸位理解，但是不会做到教科书式的面面俱到，或者涉猎太过艰深又不实用的技巧，行文的唯一目的正如题目所示，是尽可能帮助那些对 Ubuntu/Linux 感兴趣的人首先生存在这个平台，不至于因为这样那样的不方便错过或者误解一个优秀的发行版。</p>

<!--more-->


<h2>生存渐进史</h2>

<p><strong> Windows -> VirtualBox -> Wubi -> Dedicated Partition </strong></p>

<p>想学习一个操作系统最好的手段就是把自己所有的日常工作都切换到那个操作系统里去，这种沉浸式的学习方法在很多领域都适用，比如学习一门外语，学习一种编程语言，不断的碰壁和寻找解决方案在最初可能花费大量的时间，但是，不断的记录问题，写下答案，反复的遇到相同的问题，参考答案，再次实践当初的答案或者找到更优的答案，如此循序渐进以后，如果你看到一个高手可以在你束手无策的时候敲下长长的一串莫名其妙的命令，然后扬长而去，千万别惊奇，这里面没有智力的成分，也没有记忆力好坏的区别——无奇，唯手熟尔。因此最初我是在公司的 Windows 下安装虚拟机，当我发觉这种剪不断理还乱的方式，让我仍旧依赖 Windows 的时候，促使我很快就转换到 Wubi 的安装方式，再接着稳定使用了一年半以后就正式把 Wubi 移植到独立分区，从物理分区的角度告别了使用将近十几年的 Windows 平台，转而，在 Ubuntu 的 host 里虚拟了 Windows 的 guest。至此，总共是两年半。完成了从 Windows Host with Ubuntu Guest 到 Ubuntu Host with Windows Guest 的转换。套用美国佬的世界观，我们终于可以从一个不自由的世界走向一个自由世界了。</p>

<h2>三个虚拟世界：Linux， Mac， Windows</h2>

<ul>
<li>Linux     -> 开发人员，科学家，工程师的<strong>开发者系统</strong></li>
<li>Windows   -> 老百姓的<strong>普罗大众系统</strong></li>
<li>Mac       -> 上述两者之间，部分不明真相的群众，以及<strong>高端装系统</strong></li>
</ul>


<p>每个操作系统都有自己的用户，促成他们选择使用某一个系统的因素有很多，最大的原因是拒绝改变，这也成就了 Windows 平台的繁荣，但是这里不含贬义，拒绝改变的背后是因为普罗大众的生活重心并不全是计算机，他们更愿意把时间花在自己关心的领域，计算机只要够用，适用就可以接受。这一条不仅在非 IT 领域成立，即便在 IT 领域，如果你不是一线的开发人员，同样成立。撇开拒绝改变以外，每个能够存活到今天的系统本身都已经没有优劣的区分，剩下的就是理念，哲学，用途的区别，Windows， Mac， Linux 都有各自旗帜鲜明的个性，在那些不同的旗帜背后，都有坚定的拥护者，他们在自己的立场都做出了正确的选择。因此，不同阵营的旗手互相之间做无谓的争论幷无太多意义。但是如果你是一个暂时还没有使用 Ubuntu/Linux 的开发者，程序员，希望这个系列文章可以改变你的看法。</p>

<h2>开发者的操作系统</h2>

<p>Linux 是从极客的学生宿舍里走出来的操作系统，更是通过互联网完成协同开发的典范，汇集了全球极客的智慧。因此它也是一个开发者相当友好的操作系统，它的所有设计理念和哲学都是假定开发者作为最终用户的。从其它操作系统迁徙到 Linux 的时候一定要牢记这点，否则就无法理解很多事情。从这个角度说，很多争执哪个操作系统更优秀的前提就已经错了，比尔盖茨在1983年就告诉所有人他的梦想是人人有电脑可用。所以 Windows 注定是一个普罗大众为最终用户的系统，两个系统有各自的目标用户，那还吵什么呢？许多耸人听闻的报刊，杂志，博文时不时的就列出一些统计数据，然后吼一嗓子：“Linux 桌面已死！”，真心混淆视听。不过在一个商业化气氛浓厚的社会，即便是开发人员，我们也已经太长时间被 Windows 这样假定普罗大众为最终用户的系统惯坏了。我们习惯下载安装二进制文件而不是从源码开始编译，我们习惯使用鼠标而不是键盘操作电脑，我们认为没有图形界面不可想象，我们面对终端束手无策，并且经常分不清出方便和高效之间的差别。所以如果你从来没有认真使用过 Linux 千万别先忙着下结论，否则未免会有失偏颇。安装这个系统，使用这个系统，解决你的问题，然后再看是不是对你的胃口。理论上说，使用一个为开发者准备的操作系统不会有太多的为难，如果你感觉困难，只有两个原因，你拒绝改变或者你真心对开发这个事情没有兴趣，反之，适应了这个环境以后会感觉舒适，安逸。</p>

<p>为了让你或者他们自己更好的使用 Linux ，我们的前人做了很多事情。</p>

<ol>
<li><p><strong>他们首先开源了代码</strong></p>

<p> 这是一个吓坏了封闭和专利系统制作者的决定。因为那些闭源厂商依靠贩卖专利和二进制文件获利，公布自己的代码，并且连带修改和发行权利也一并不要了，这在闭源厂商是不能想象的。相反在开源系统中，开发者求知的愿望被充分尊重了，他们可以任意阅读自己感兴趣的代码，获取知识，修补臭虫，甚至参与开源项目，结识更多其它有求知欲的极客，从而提高自己的开发水平。在闭源系统中，开发者只能依赖厂商提供的 API，文档以及定期的补丁包--这些同样是普罗大众不那么关心但是开发者所不能接受的。因此使用开源系统无疑可以增强自己的技能水准，并且在使用系统的同时有机会改进和修补自己的系统。</p></li>
<li><p><strong>他们更懂开发者</strong></p>

<p> 从诞生之初起，这就是一个极客玩出来的操作系统。与其说他们是在开发操作系统不如说他们是在满足开发者自己的需求，这就是著名的“吃狗食“理论，需要一个开发者系统：1. 动手做一个 -> 2. 生存在其中 -> 3. 体会优劣 -> 4. 修补不足，增进优势使它更适合开发 -> 循环至 1. 生存在其中。所以这个系统会越来越朝着它的方向发展，那就取悦开发者自己。经过大约二十多年的发展，今天的开发者系统已经积累了无数提升开发生产力的哲学，理念和工具软件。几乎你能想到的和未能想到的一切和开发相关的需求都已经在开发者系统上被满足了，你需要做的就是学习，练习和使用。即便这仍然不能满足你，开发者系统上很容易对已有的存在做一个分支然后进行自我满足的工作。某些时候没人比你自己更懂自己，更多的时候他们比你更懂你自己，使用开发者系统的开发者时常就会想到要是有这么一个功能就好了，然后 Google 一下相关资料，接着自言自语 “哦。。。果然已经有了”。物以类聚，人以群分，如果我们的行为方式和思维模式相近，那么先前的开发者早就遇到过相同的困扰并且动手解决了问题。你仍然只需要学习，练习和使用，仅此而已。他们懂得键盘比起鼠标在大多数开发场合更高效，他们懂得软件界面首先需要的是命令行，其次才是图形化界面，他们懂得命令优于导航的哲学，你需要编辑器/编译器，他们提供了伟大的 Vim，Emacs/gcc, g++，你需要好用的脚本语言，他们内置了Bash Shell/Python，你需要更高效的操作电脑，他们提供了无数的实用命令行程序，幷为几乎每一个程序配置了无数参数来满足你的需要，一旦我们理解他们这么做的初衷，剩下的还是学习，练习和使用。</p></li>
<li><p><strong>我们更懂自己吗？</strong></p>

<p> 不幸的是很多人接受了馈赠却开始抱怨：“这么多命令，参数怎么记得住？为什么没有像样的 GUI 版本，为什么没有像 VB 那样可拖拉的 IDE？ 我需要一个开箱即用的系统，不折腾!”。实际上我们幷没有开发这些程序，其实我们没有资格抱怨什么，如果我们需要的幷不存在于开发者系统，那么停止抱怨，仔细思考，更大的可能是：不存在意味着不需要，意味着存在会拖累生产力，违背开发者系统的哲学。很多的误解来自长期使用普罗大众系统，我们是被惯坏的一代，普罗大众系统假定用户依靠鼠标和直觉去操作系统，他们依靠尽量压缩用户的学习成本去博得方便使用的好名声，很多系统在这方面确实做得很好，很多人不需要阅读使用手册就可以使用软件和操作系统。这同样也是普罗大众系统经过几十年“吃狗食”得到的回报。但是仔细想想这是开发者需要的系统吗？普罗大众和开发者站在两个各自的立场，有各自的需求。如果开发者觉得普罗大众系统很好用，这现象本身就很值得探讨，肯定有地方出错了不是吗？ 何况这是一个开发者友好的系统，那么为什么还是有许多开发者并不适应？其实我们忘记了一个最简单的道理，技能是需要习得的。开发者不能按普罗大众的要求来要求自己，方便和高效其实并不是等价的，普罗大众系统的方便是依靠牺牲效率和可定制性来达成的，例如鼠标点击运行程序看起来比输入命令启动程序方便很多，但是如果你需要从上百个图标里寻找那个程序会怎么样？你又能不能启动程序的时候要求启动后最大化窗口？所以开发者系统开始不断增加命令，配置，选项和各类约定来追求效率和可定制性。而一旦我们认为效率和可定制性更重要的时候，记忆的负担，学习的成本就出现了，我们需要去学习记忆，熟练运用那些命令配置，了解约定，遵守约定。开发者需要不断的学习技能以追求更高效的使用开发者系统，这才是开发者和普罗大众的本质区别，这个世界上幷没有那么多好处全你占的事情，提升效率的前提便是增加学习成本，容忍一定程度的不那么方便。不想折腾又想高效的使用开发者系统就和没好好学过外语又想有流利的口语一样荒诞，我们所有的技能，除了本能以外，譬如：心算，语言，记忆力，专业技能都需要反复折腾才能获得，使用开发者系统同样如此。说不折腾的人，要么是普罗大众，要么被普罗大众系统搞傻了，要么就是身心老了，折腾不动了。了解这个事实以后，读者自行权衡，然后我们才能说接下来的事情。</p></li>
</ol>


<h2>Linux 哲学</h2>

<p>为了高效的使用开发者系统，Linux 哲学中最重要的一点就是<strong>命令优于导航</strong>。</p>

<p>导航操作是指人类通过视觉定位，进而层层递进的操作方式，通常由鼠标完成。例如浏览网页，点击链接进而继续浏览点击。对于普罗大众有以下几个情形，我们会使用导航方式：</p>

<ol>
<li><p>不知道自己想让计算机做什么或者计算机可以告诉我们什么，通过随意浏览方式挖掘我们可能可以让计算机做什么或者告诉我什么。最常见的案例就是在没有使用手册的情况下，所以点击菜单，看看某个软件都有哪些功能，或者是去门户网站，微博上刷刷有什么自己感兴趣的内容。</p></li>
<li><p>我知道要计算机做什么，但是我需要先在一堆菜单，图标里找到我需要的按钮，在告诉计算机去做之前必须例行的完成数次导航操作，例如我想卸载某个游戏，就需要从点击菜单栏开始寻找到这个游戏的程序组，点击卸载图标。又例如我需要安装 Firefox，那我得先设法找到 Firefox 的官网，从其中找到下载链接，选择相适应的匹配版本，然后点击下载，等待完成后，去安装文件所在的文件夹，双击安装，期间还需要确认无数条款，选择安装目录，删减可选插件，最后确认安装。</p></li>
</ol>


<p>命令操作则无需付出视觉定位的成本，如果你会盲打，基本上你可以直接使用快捷键或者敲击命令行对计算机进行操作，这些操作通常只依赖于键盘。由于标准键盘上有至少100个以上的按键，可以组合出无数的操作手法以应对各种复杂的情况，所以基本上键盘是最重要和最强大的计算机输入设备。很可惜普罗大众很多时候没有意识到这一点，只是在码字的时候才敲击键盘，却不善于真正使用键盘操控计算机的其它功能。我们会使用命令方式:</p>

<ol>
<li><p>在不知道计算机能做什么的时候，一样用命令方式进行浏览，除非某些 GUI 软件不提供快捷键功能。</p></li>
<li><p>在知道要计算做什么的时候直接给出相应的命令操控电脑，比如我需要安装 Firefox，基本上在 Ubuntu 里，只需要键入：</p></li>
</ol>


<p><code>
sudo apt-get install firefox
</code></p>

<p>那么为什么说<strong>命令优于导航？</strong>几点原因：</p>

<ul>
<li><strong>导航操作从生理上增加了使用电脑的额外负担</strong></li>
</ul>


<p>仔细回顾一个最基本的问题：我们是如何使用一台计算机的？通过输入设备传达指令，计算机做出处理幷通过输出设备返回结果，这就是最基本的使用流程。无论是个人电脑，智能手机，平板都是这个流程。哪个系统更方便输入，哪个系统就更方便使用，普罗大众系统很清楚这一个基本准则，所以他们最小化了用户输入指令的成本，开发出了鼠标，触摸屏，甚至语音识辨，声控系统，光感系统。在公众视野制造了一波又一波的流行热。但是追求潮流并不解决效率的问题，如前文所述，方便幷不意味着高效。尤其对于需要大量输入的开发者系统而言更是如此。基本的鼠标操作是基于图形界面也就是导航的，我们通过鼠标传达指令，首先需要通过眼睛定位图形界面上操作对象的位置例如：一个菜单，一个按钮，其次移动鼠标定位位置，完成点击，并且往往需要重复一系列这个过程才能完成一个实际上有意义的操作，如果同时还需要大量的文本处理，那么双手还需要在鼠标和键盘之间做大量费时的切换工作。的确，每一次定位，点击，切换的代价幷没有那么的大，但是累积到一定程度，或者当你需要批处理一堆类似的任务，就相当的折磨人了。是不是时常感觉到右手肩关节有酸疼感？直接病因就是长期依赖右手握持鼠标，右肩无法呈自然下垂姿态。这个病俗称鼠标手，学名肩周琰。可见导航操作给身体带来了多大的伤害。命令操作的输入代价会大一些，但是让双手全程固定在了键盘上，对于文字输入者避免了切换鼠标的时间损耗，和注意力的被迫转移。命令本身，通过组合，也是对计算机系统最直接的指令下达，很多时候反而可以避免大量的导航工作。如前所述的 Firefox 安装。</p>

<ul>
<li><strong>导航操作容易产生视觉上的迷失</strong></li>
</ul>


<p>前面我们提到过，在一个有几十个图标的桌面上，要定位到某个想要启动的程序，或者在一个多级菜单里寻找某个软件功能是费力费眼的。如果你了解等价的命令，直接键入程序名然后启动应用程序会快上很多倍。也就是说如果你知道你想干什么，使用键盘键入命令或者执行搜索，效果会比肉眼巡视来得高效很多。搜索这个概念在开发者系统的很多地方都贯穿得相当彻底，find/which/whereis/grep/vim/vimperator 很多命令都是基于搜索优于导航这一理念的。时刻养成搜索的习惯能帮助我们更高效的使用开发者系统。</p>

<p><img src="/images/ubuntu_living_handbook/start_firefox.png" alt="Start Firefox" /></p>

<ul>
<li><strong>命令操作更容易被开发，组合使用，以及更容易地进行参数调整，脚本化批量处理</strong></li>
</ul>


<p>开发基于导航的 GUI 成本巨大而且容易出错，命令行则相反。这就让开发者在最初可以只集中精力处理命令本身需要完成的核心功能，而不是花费大量的时间在 GUI 的外壳上。通过几个小程序组合出更强悍的功能，通过调整不同的参数或者使用文本配置文件的方式进行随意的软件定制，甚至批处理一堆需要重复运行的计算机操作，这在命令行都是很自然的事情，GUI 想达成同样的目标就相当费力了。</p>

<ul>
<li><strong>便于远程管理计算机</strong></li>
</ul>


<p>在桌面上强调使用命令，使得我们顺便捡到了一份红利，因为我们惯用命令，可以摆脱 GUI 的依赖，我们就能更好的登录到远程的机器上进行各种操作，因为使用命令的传输代价远远小于图形界面的远程传输，时至今日，ssh 远程登入仍然是 Linux 系统管理员远程管理电脑的标准方式。所有你在本地桌面上操练掌握的命令，都可以在远程服务器上别无二致的使用，不至于在只配备终端没有GUI的服务器上会感觉手足无措。</p>

<p>通过<strong>命令优于导航</strong>这一条公理，我们演化出了以下理念，请在使用开发者系统的时候时刻牢记：</p>

<ol>
<li>命令行优于图形界面</li>
<li>键盘优于鼠标</li>
<li>搜索优于导航</li>
</ol>


<p>最后，使用开发者系统的前提是认同 Linux 哲学，理解学习，记忆的代价是用来换取高效使用开发者系统而产生的。你越多的付出脑力成本使用这个系统，就会越高效安逸的生存在这个系统中，也就越认同她的哲学，使得你付出更多的脑力成本，继而进入同时锻炼脑力和提高生产力的良性循环中。这种变化甚至可以影响到你做任何事情的态度：收起懒散的心理和涣散的心智，使用脑力来提升效率，最终让你成为一个务实，智慧和高效的人。</p>
]]></content>
  </entry>
  
</feed>
